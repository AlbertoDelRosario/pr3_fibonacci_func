(* Module for axiomatizing type "short_short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_short_integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type short_short_integer =
  < range -128 127 >
 
 function first 
   : int =
  ( -128 )
 
 function last 
   : int =
  127
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = short_short_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type short_short_integer__ref =
  { mutable short_short_integer__content "model_trace:" "name:" : short_short_integer }
 
 function short_short_integer__ref___projection 
   (a : short_short_integer__ref) : short_short_integer =
  a.short_short_integer__content
 
 meta "model_projection" function short_short_integer__ref___projection
 
 meta "inline : no" function short_short_integer__ref___projection
 
 val short_short_integer__havoc 
   (x : short_short_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "short_short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_short_integer__rep
 use        Standard__short_short_integer
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__short_short_integer.short_short_integer) : int =
  (Standard__short_short_integer.short_short_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__short_short_integer.short_short_integer, 
 predicate in_range = Standard__short_short_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type short_integer =
  < range -32768 32767 >
 
 function first 
   : int =
  ( -32768 )
 
 function last 
   : int =
  32767
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = short_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type short_integer__ref =
  { mutable short_integer__content "model_trace:" "name:" : short_integer }
 
 function short_integer__ref___projection 
   (a : short_integer__ref) : short_integer =
  a.short_integer__content
 
 meta "model_projection" function short_integer__ref___projection
 
 meta "inline : no" function short_integer__ref___projection
 
 val short_integer__havoc 
   (x : short_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_integer__rep
 use        Standard__short_integer
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__short_integer.short_integer) : int =
  (Standard__short_integer.short_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__short_integer.short_integer, 
 predicate in_range = Standard__short_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer =
  < range -2147483648 2147483647 >
 
 function first 
   : int =
  ( -2147483648 )
 
 function last 
   : int =
  2147483647
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer__ref =
  { mutable integer__content "model_trace:" "name:" : integer }
 
 function integer__ref___projection 
   (a : integer__ref) : integer =
  a.integer__content
 
 meta "model_projection" function integer__ref___projection
 
 meta "inline : no" function integer__ref___projection
 
 val integer__havoc 
   (x : integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer__rep
 use        Standard__integer
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__integer.integer) : int =
  (Standard__integer.integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__integer.integer, 
 predicate in_range = Standard__integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type long_integer =
  < range -2147483648 2147483647 >
 
 function first 
   : int =
  ( -2147483648 )
 
 function last 
   : int =
  2147483647
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = long_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type long_integer__ref =
  { mutable long_integer__content "model_trace:" "name:" : long_integer }
 
 function long_integer__ref___projection 
   (a : long_integer__ref) : long_integer =
  a.long_integer__content
 
 meta "model_projection" function long_integer__ref___projection
 
 meta "inline : no" function long_integer__ref___projection
 
 val long_integer__havoc 
   (x : long_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_integer__rep
 use        Standard__long_integer
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__long_integer.long_integer) : int =
  (Standard__long_integer.long_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__long_integer.long_integer, 
 predicate in_range = Standard__long_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "long_long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_long_integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type long_long_integer =
  < range -9223372036854775808 9223372036854775807 >
 
 function first 
   : int =
  ( -9223372036854775808 )
 
 function last 
   : int =
  9223372036854775807
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = long_long_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type long_long_integer__ref =
  { mutable long_long_integer__content "model_trace:" "name:" : long_long_integer }
 
 function long_long_integer__ref___projection 
   (a : long_long_integer__ref) : long_long_integer =
  a.long_long_integer__content
 
 meta "model_projection" function long_long_integer__ref___projection
 
 meta "inline : no" function long_long_integer__ref___projection
 
 val long_long_integer__havoc 
   (x : long_long_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "long_long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_long_integer__rep
 use        Standard__long_long_integer
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__long_long_integer.long_long_integer) : int =
  (Standard__long_long_integer.long_long_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__long_long_integer.long_long_integer, 
 predicate in_range = Standard__long_long_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "natural", created in Gnat2Why.Types.Translate_Type *)
module Standard__natural
 use import "_gnatprove_standard".Main
 use import "int".Int

 type natural =
  < range 0 2147483647 >
 
 function first 
   : int =
  0
 
 function last 
   : int =
  2147483647
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = natural, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type natural__ref =
  { mutable natural__content "model_trace:" "name:" : natural }
 
 function natural__ref___projection 
   (a : natural__ref) : natural =
  a.natural__content
 
 meta "model_projection" function natural__ref___projection
 
 meta "inline : no" function natural__ref___projection
 
 val natural__havoc 
   (x : natural__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "natural", created in Gnat2Why.Types.Translate_Type *)
module Standard__natural__rep
 use        Standard__natural
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__natural.natural) : int =
  (Standard__natural.natural'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__natural.natural, 
 predicate in_range = Standard__natural.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "positive", created in Gnat2Why.Types.Translate_Type *)
module Standard__positive
 use import "_gnatprove_standard".Main
 use import "int".Int

 type positive =
  < range 1 2147483647 >
 
 function first 
   : int =
  1
 
 function last 
   : int =
  2147483647
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = positive, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type positive__ref =
  { mutable positive__content "model_trace:" "name:" : positive }
 
 function positive__ref___projection 
   (a : positive__ref) : positive =
  a.positive__content
 
 meta "model_projection" function positive__ref___projection
 
 meta "inline : no" function positive__ref___projection
 
 val positive__havoc 
   (x : positive__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "positive", created in Gnat2Why.Types.Translate_Type *)
module Standard__positive__rep
 use        Standard__positive
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__positive.positive) : int =
  (Standard__positive.positive'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__positive.positive, 
 predicate in_range = Standard__positive.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "short_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_float
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32

 type short_float 
 
 function first 
   : Float32.t =
  (Float32.neg (340282346638528859811704183484516925440.0:Float32.t))
 
 function last 
   : Float32.t =
  (340282346638528859811704183484516925440.0:Float32.t)
 
 predicate in_range 
   (x : Float32.t)  =
  (Float32.t'isFinite x)
 
 clone export "ada__model".Static_Float32 with
 type t = short_float, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type short_float__ref =
  { mutable short_float__content "model_trace:" "name:" : short_float }
 
 function short_float__ref___projection 
   (a : short_float__ref) : short_float =
  a.short_float__content
 
 meta "model_projection" function short_float__ref___projection
 
 meta "inline : no" function short_float__ref___projection
 
 val short_float__havoc 
   (x : short_float__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "short_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_float__rep
 use        Standard__short_float
 use        "_gnatprove_standard".Float32
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Float32 with
 type t = Standard__short_float.short_float, 
 predicate in_range = Standard__short_float.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "float", created in Gnat2Why.Types.Translate_Type *)
module Standard__float
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32

 type float 
 
 function first 
   : Float32.t =
  (Float32.neg (340282346638528859811704183484516925440.0:Float32.t))
 
 function last 
   : Float32.t =
  (340282346638528859811704183484516925440.0:Float32.t)
 
 predicate in_range 
   (x : Float32.t)  =
  (Float32.t'isFinite x)
 
 clone export "ada__model".Static_Float32 with
 type t = float, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type float__ref =
  { mutable float__content "model_trace:" "name:" : float }
 
 function float__ref___projection 
   (a : float__ref) : float =
  a.float__content
 
 meta "model_projection" function float__ref___projection
 
 meta "inline : no" function float__ref___projection
 
 val float__havoc 
   (x : float__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "float", created in Gnat2Why.Types.Translate_Type *)
module Standard__float__rep
 use        Standard__float
 use        "_gnatprove_standard".Float32
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Float32 with
 type t = Standard__float.float, 
 predicate in_range = Standard__float.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "long_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_float
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float64

 type long_float 
 
 function first 
   : Float64.t =
  (Float64.neg (179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.0:Float64.t))
 
 function last 
   : Float64.t =
  (179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.0:Float64.t)
 
 predicate in_range 
   (x : Float64.t)  =
  (Float64.t'isFinite x)
 
 clone export "ada__model".Static_Float64 with
 type t = long_float, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type long_float__ref =
  { mutable long_float__content "model_trace:" "name:" : long_float }
 
 function long_float__ref___projection 
   (a : long_float__ref) : long_float =
  a.long_float__content
 
 meta "model_projection" function long_float__ref___projection
 
 meta "inline : no" function long_float__ref___projection
 
 val long_float__havoc 
   (x : long_float__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "long_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_float__rep
 use        Standard__long_float
 use        "_gnatprove_standard".Float64
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Float64 with
 type t = Standard__long_float.long_float, 
 predicate in_range = Standard__long_float.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "character", created in Gnat2Why.Types.Translate_Type *)
module Standard__character
 use import "_gnatprove_standard".Main
 use import "int".Int

 type character 
 
 function first 
   : int =
  0
 
 function last 
   : int =
  255
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type character__ref =
  { mutable character__content "model_trace:" "name:" : character }
 
 function character__ref___projection 
   (a : character__ref) : character =
  a.character__content
 
 meta "model_projection" function character__ref___projection
 
 meta "inline : no" function character__ref___projection
 
 val character__havoc 
   (x : character__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "character", created in Gnat2Why.Types.Translate_Type *)
module Standard__character__rep
 use        Standard__character
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__character.character, 
 predicate in_range = Standard__character.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_character
 use import "_gnatprove_standard".Main
 use import "int".Int

 type wide_character 
 
 function first 
   : int =
  0
 
 function last 
   : int =
  65535
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = wide_character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type wide_character__ref =
  { mutable wide_character__content "model_trace:" "name:" : wide_character }
 
 function wide_character__ref___projection 
   (a : wide_character__ref) : wide_character =
  a.wide_character__content
 
 meta "model_projection" function wide_character__ref___projection
 
 meta "inline : no" function wide_character__ref___projection
 
 val wide_character__havoc 
   (x : wide_character__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_character__rep
 use        Standard__wide_character
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__wide_character.wide_character, 
 predicate in_range = Standard__wide_character.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "wide_wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_character
 use import "_gnatprove_standard".Main
 use import "int".Int

 type wide_wide_character 
 
 function first 
   : int =
  0
 
 function last 
   : int =
  2147483647
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = wide_wide_character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type wide_wide_character__ref =
  { mutable wide_wide_character__content "model_trace:" "name:" : wide_wide_character }
 
 function wide_wide_character__ref___projection 
   (a : wide_wide_character__ref) : wide_wide_character =
  a.wide_wide_character__content
 
 meta "model_projection" function wide_wide_character__ref___projection
 
 meta "inline : no" function wide_wide_character__ref___projection
 
 val wide_wide_character__havoc 
   (x : wide_wide_character__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "wide_wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_character__rep
 use        Standard__wide_wide_character
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__wide_wide_character.wide_wide_character, 
 predicate in_range = Standard__wide_wide_character.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing the array theory associated to type "string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__character
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__character
 use        Standard__character__rep

 function index_I1_one 
   : int =
  1
 
 type component_type =
  Standard__character.character
 
 clone export "_gnatprove_standard".Array__1 with
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_91   : int.
   (if (( (a__first <= temp___idx_91) /\ (temp___idx_91 <= a__last) )) then (
    ((Standard__character__rep.to_rep (get a temp___idx_91)) = (Standard__character__rep.to_rep (get b ((b__first - a__first) + temp___idx_91))))) else true)) )
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_91   : int.
    (if (( (a__first <= temp___idx_91) /\ (temp___idx_91 <= a__last) )) then (
     ((Standard__character__rep.to_rep (get a temp___idx_91)) = (Standard__character__rep.to_rep (get b ((b__first - a__first) + temp___idx_91))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "string", created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Standard__character__Concat
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Array__Int__Standard__character

 function index_Index_one 
   : int =
  1
 
 clone export "_gnatprove_standard".Array__1__Concat with
 type component_type = Array__Int__Standard__character.component_type, 
 type map = Array__Int__Standard__character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__character.get

end

(* Module for axiomatizing comparison for the array theory associated to type "string", created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Standard__character_Comp
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__character__rep
 use        Array__Int__Standard__character

 function index_Index_one 
   : int =
  1
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with
 type component_type = Array__Int__Standard__character.component_type, 
 function to_rep = Standard__character__rep.to_rep, 
 type map = Array__Int__Standard__character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__character.get, 
 function bool_eq = Array__Int__Standard__character.bool_eq

end

(* Module for axiomatizing type "string", created in Gnat2Why.Types.Translate_Type *)
module Standard__string
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Main
 use        Standard__integer
 use        Standard__positive
 use        Standard__character
 use        Array__Int__Standard__character
 use        Standard__integer__rep

 type component_type =
  Standard__character.character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type string =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 function to_string 
   (x : Main.__image) : string
 
 function from_string 
   (x : string) : Main.__image
 
 type string__ref =
  { mutable string__content "model_trace:" "name:" : string }
 
 function string__ref___projection 
   (a : string__ref) : string =
  a.string__content
 
 meta "model_projection" function string__ref___projection
 
 meta "inline : no" function string__ref___projection
 
 val string__havoc 
   (x : string__ref) : unit
  writes {x}

end

(* Module for axiomatizing the array theory associated to type "wide_string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__wide_character
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__wide_character
 use        Standard__wide_character__rep

 function index_I1_one 
   : int =
  1
 
 type component_type =
  Standard__wide_character.wide_character
 
 clone export "_gnatprove_standard".Array__1 with
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_98   : int.
   (if (( (a__first <= temp___idx_98) /\ (temp___idx_98 <= a__last) )) then (
    ((Standard__wide_character__rep.to_rep (get a temp___idx_98)) = (Standard__wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_98))))) else true)) )
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_98   : int.
    (if (( (a__first <= temp___idx_98) /\ (temp___idx_98 <= a__last) )) then (
     ((Standard__wide_character__rep.to_rep (get a temp___idx_98)) = (Standard__wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_98))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "wide_string", created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Standard__wide_character__Concat
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Array__Int__Standard__wide_character

 function index_Index_one 
   : int =
  1
 
 clone export "_gnatprove_standard".Array__1__Concat with
 type component_type = Array__Int__Standard__wide_character.component_type, 
 type map = Array__Int__Standard__wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_character.get

end

(* Module for axiomatizing comparison for the array theory associated to type "wide_string", created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Standard__wide_character_Comp
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__wide_character__rep
 use        Array__Int__Standard__wide_character

 function index_Index_one 
   : int =
  1
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with
 type component_type = Array__Int__Standard__wide_character.component_type, 
 function to_rep = Standard__wide_character__rep.to_rep, 
 type map = Array__Int__Standard__wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_character.get, 
 function bool_eq = Array__Int__Standard__wide_character.bool_eq

end

(* Module for axiomatizing type "wide_string", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_string
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__positive
 use        Standard__wide_character
 use        Standard__integer__rep
 use        Array__Int__Standard__wide_character

 type component_type =
  Standard__wide_character.wide_character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Standard__wide_character.map, 
 function array_bool_eq = Array__Int__Standard__wide_character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type wide_string =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 type wide_string__ref =
  { mutable wide_string__content "model_trace:" "name:" : wide_string }
 
 function wide_string__ref___projection 
   (a : wide_string__ref) : wide_string =
  a.wide_string__content
 
 meta "model_projection" function wide_string__ref___projection
 
 meta "inline : no" function wide_string__ref___projection
 
 val wide_string__havoc 
   (x : wide_string__ref) : unit
  writes {x}

end

(* Module for axiomatizing the array theory associated to type "wide_wide_string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__wide_wide_character
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__wide_wide_character
 use        Standard__wide_wide_character__rep

 function index_I1_one 
   : int =
  1
 
 type component_type =
  Standard__wide_wide_character.wide_wide_character
 
 clone export "_gnatprove_standard".Array__1 with
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_105   : int.
   (if (( (a__first <= temp___idx_105) /\ (temp___idx_105 <= a__last) )) then (
    ((Standard__wide_wide_character__rep.to_rep (get a temp___idx_105)) = (Standard__wide_wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_105))))) else true)) )
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_105   : int.
    (if (( (a__first <= temp___idx_105) /\ (temp___idx_105 <= a__last) )) then (
     ((Standard__wide_wide_character__rep.to_rep (get a temp___idx_105)) = (Standard__wide_wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_105))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "wide_wide_string", created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Standard__wide_wide_character__Concat
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Array__Int__Standard__wide_wide_character

 function index_Index_one 
   : int =
  1
 
 clone export "_gnatprove_standard".Array__1__Concat with
 type component_type = Array__Int__Standard__wide_wide_character.component_type, 
 type map = Array__Int__Standard__wide_wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_wide_character.get

end

(* Module for axiomatizing comparison for the array theory associated to type "wide_wide_string", created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Standard__wide_wide_character_Comp
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__wide_wide_character__rep
 use        Array__Int__Standard__wide_wide_character

 function index_Index_one 
   : int =
  1
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with
 type component_type = Array__Int__Standard__wide_wide_character.component_type, 
 function to_rep = Standard__wide_wide_character__rep.to_rep, 
 type map = Array__Int__Standard__wide_wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_wide_character.get, 
 function bool_eq = Array__Int__Standard__wide_wide_character.bool_eq

end

(* Module for axiomatizing type "wide_wide_string", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_string
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__positive
 use        Standard__wide_wide_character
 use        Standard__integer__rep
 use        Array__Int__Standard__wide_wide_character

 type component_type =
  Standard__wide_wide_character.wide_wide_character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Standard__wide_wide_character.map, 
 function array_bool_eq = Array__Int__Standard__wide_wide_character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type wide_wide_string =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 type wide_wide_string__ref =
  { mutable wide_wide_string__content "model_trace:" "name:" : wide_wide_string }
 
 function wide_wide_string__ref___projection 
   (a : wide_wide_string__ref) : wide_wide_string =
  a.wide_wide_string__content
 
 meta "model_projection" function wide_wide_string__ref___projection
 
 meta "inline : no" function wide_wide_string__ref___projection
 
 val wide_wide_string__havoc 
   (x : wide_wide_string__ref) : unit
  writes {x}

end

(* Module for fixed-point operation for type at system.ads:1, created in Why.Gen.Scalars.Create_Fixed_Point_Theory_If_Needed *)
module Fixed_Point__1_1000000000
 use import "_gnatprove_standard".Main
 use import "int".Int

 function num_small 
   : int =
  1
 
 function den_small 
   : int =
  1000000000
 
 clone export "ada__model".Fixed_Point_Rep with
 function num_small = num_small, 
 function den_small = den_small

end

(* Module for axiomatizing type "duration", created in Gnat2Why.Types.Translate_Type *)
module Standard__duration
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Main

 type duration 
 
 function num_small 
   : Main.__fixed =
  1
 
 function den_small 
   : Main.__fixed =
  1000000000
 
 function first 
   : Main.__fixed =
  ( -9223372036854775808 )
 
 function last 
   : Main.__fixed =
  9223372036854775807
 
 predicate in_range 
   (x : Main.__fixed)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Fixed_Point with
 type t = duration, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type duration__ref =
  { mutable duration__content "model_trace:" "name:" : duration }
 
 function duration__ref___projection 
   (a : duration__ref) : duration =
  a.duration__content
 
 meta "model_projection" function duration__ref___projection
 
 meta "inline : no" function duration__ref___projection
 
 val duration__havoc 
   (x : duration__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "integer_8", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_8
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer_8 =
  < range -128 127 >
 
 function first 
   : int =
  ( -128 )
 
 function last 
   : int =
  127
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer_8, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_8__ref =
  { mutable integer_8__content "model_trace:" "name:" : integer_8 }
 
 function integer_8__ref___projection 
   (a : integer_8__ref) : integer_8 =
  a.integer_8__content
 
 meta "model_projection" function integer_8__ref___projection
 
 meta "inline : no" function integer_8__ref___projection
 
 val integer_8__havoc 
   (x : integer_8__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_8", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_8__rep
 use        Standard__integer_8
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__integer_8.integer_8) : int =
  (Standard__integer_8.integer_8'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__integer_8.integer_8, 
 predicate in_range = Standard__integer_8.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "integer_16", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_16
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer_16 =
  < range -32768 32767 >
 
 function first 
   : int =
  ( -32768 )
 
 function last 
   : int =
  32767
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer_16, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_16__ref =
  { mutable integer_16__content "model_trace:" "name:" : integer_16 }
 
 function integer_16__ref___projection 
   (a : integer_16__ref) : integer_16 =
  a.integer_16__content
 
 meta "model_projection" function integer_16__ref___projection
 
 meta "inline : no" function integer_16__ref___projection
 
 val integer_16__havoc 
   (x : integer_16__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_16", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_16__rep
 use        Standard__integer_16
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__integer_16.integer_16) : int =
  (Standard__integer_16.integer_16'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__integer_16.integer_16, 
 predicate in_range = Standard__integer_16.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "integer_32", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_32
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer_32 =
  < range -2147483648 2147483647 >
 
 function first 
   : int =
  ( -2147483648 )
 
 function last 
   : int =
  2147483647
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer_32, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_32__ref =
  { mutable integer_32__content "model_trace:" "name:" : integer_32 }
 
 function integer_32__ref___projection 
   (a : integer_32__ref) : integer_32 =
  a.integer_32__content
 
 meta "model_projection" function integer_32__ref___projection
 
 meta "inline : no" function integer_32__ref___projection
 
 val integer_32__havoc 
   (x : integer_32__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_32", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_32__rep
 use        Standard__integer_32
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__integer_32.integer_32) : int =
  (Standard__integer_32.integer_32'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__integer_32.integer_32, 
 predicate in_range = Standard__integer_32.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "integer_64", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_64
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer_64 =
  < range -9223372036854775808 9223372036854775807 >
 
 function first 
   : int =
  ( -9223372036854775808 )
 
 function last 
   : int =
  9223372036854775807
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer_64, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_64__ref =
  { mutable integer_64__content "model_trace:" "name:" : integer_64 }
 
 function integer_64__ref___projection 
   (a : integer_64__ref) : integer_64 =
  a.integer_64__content
 
 meta "model_projection" function integer_64__ref___projection
 
 meta "inline : no" function integer_64__ref___projection
 
 val integer_64__havoc 
   (x : integer_64__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_64", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_64__rep
 use        Standard__integer_64
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__integer_64.integer_64) : int =
  (Standard__integer_64.integer_64'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__integer_64.integer_64, 
 predicate in_range = Standard__integer_64.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "universal_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__universal_integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type universal_integer =
  < range -9223372036854775808 9223372036854775807 >
 
 function first 
   : int =
  ( -9223372036854775808 )
 
 function last 
   : int =
  9223372036854775807
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = universal_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type universal_integer__ref =
  { mutable universal_integer__content "model_trace:" "name:" : universal_integer }
 
 function universal_integer__ref___projection 
   (a : universal_integer__ref) : universal_integer =
  a.universal_integer__content
 
 meta "model_projection" function universal_integer__ref___projection
 
 meta "inline : no" function universal_integer__ref___projection
 
 val universal_integer__havoc 
   (x : universal_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "universal_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__universal_integer__rep
 use        Standard__universal_integer
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__universal_integer.universal_integer) : int =
  (Standard__universal_integer.universal_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__universal_integer.universal_integer, 
 predicate in_range = Standard__universal_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing the array theory associated to type "arrayofints" defined at fibonacci_functions.ads:5, created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__integer
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 function index_I1_one 
   : int =
  1
 
 type component_type =
  Standard__integer.integer
 
 clone export "_gnatprove_standard".Array__1 with
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_154   : int.
   (if (( (a__first <= temp___idx_154) /\ (temp___idx_154 <= a__last) )) then (
    ((Standard__integer__rep.to_rep (get a temp___idx_154)) = (Standard__integer__rep.to_rep (get b ((b__first - a__first) + temp___idx_154))))) else true)) )
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_154   : int.
    (if (( (a__first <= temp___idx_154) /\ (temp___idx_154 <= a__last) )) then (
     ((Standard__integer__rep.to_rep (get a temp___idx_154)) = (Standard__integer__rep.to_rep (get b ((b__first - a__first) + temp___idx_154))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "arrayofints" defined at fibonacci_functions.ads:5, created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Standard__integer__Concat
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Array__Int__Standard__integer

 function index_Index_one 
   : int =
  1
 
 clone export "_gnatprove_standard".Array__1__Concat with
 type component_type = Array__Int__Standard__integer.component_type, 
 type map = Array__Int__Standard__integer.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__integer.get

end

(* Module for axiomatizing comparison for the array theory associated to type "arrayofints" defined at fibonacci_functions.ads:5, created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Standard__integer_Comp
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer__rep
 use        Array__Int__Standard__integer

 function index_Index_one 
   : int =
  1
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with
 type component_type = Array__Int__Standard__integer.component_type, 
 function to_rep = Standard__integer__rep.to_rep, 
 type map = Array__Int__Standard__integer.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__integer.get, 
 function bool_eq = Array__Int__Standard__integer.bool_eq

end

(* Module for axiomatizing type "arrayofints" defined at fibonacci_functions.ads:5, created in Gnat2Why.Types.Translate_Type *)
module Fibonacci_functions__arrayofints
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer
 use        Standard__positive
 use        Standard__integer__rep
 use        Array__Int__Standard__integer

 type component_type =
  Standard__integer.integer
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Standard__integer.map, 
 function array_bool_eq = Array__Int__Standard__integer.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type arrayofints =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 type arrayofints__ref =
  { mutable arrayofints__content "model_trace:" "name:" : arrayofints }
 
 function arrayofints__ref___projection 
   (a : arrayofints__ref) : arrayofints =
  a.arrayofints__content
 
 meta "model_projection" function arrayofints__ref___projection
 
 meta "inline : no" function arrayofints__ref___projection
 
 val arrayofints__havoc 
   (x : arrayofints__ref) : unit
  writes {x}

end

(* Module for defining the constant "value" defined at fibonacci_functions.ads:7, created in Gnat2Why.Decls.Translate_Constant *)
module Fibonacci_functions__fibo_get_value__value
 use import "_gnatprove_standard".Main

 function value #"fibonacci_functions.ads" 7 0 0#"model" "model_trace:2808" "name:value" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "value" defined at fibonacci_functions.ads:7, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Fibonacci_functions__fibo_get_value__value___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "fibo_get_value" defined at fibonacci_functions.ads:7, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Fibonacci_functions__fibo_get_value
 use import "_gnatprove_standard".Main

 function fibo_get_value 
   (value : int) : int
 
 predicate fibo_get_value__function_guard 
   (result : int) (value : int) 

end

(* Module for defining the constant "value" defined at fibonacci_functions.ads:16, created in Gnat2Why.Decls.Translate_Constant *)
module Fibonacci_functions__fibo_closest_value__value
 use import "_gnatprove_standard".Main

 function value #"fibonacci_functions.ads" 16 0 0#"model" "name:value" "model_trace:2852" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "value" defined at fibonacci_functions.ads:16, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Fibonacci_functions__fibo_closest_value__value___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "fibo_closest_value" defined at fibonacci_functions.ads:16, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Fibonacci_functions__fibo_closest_value
 use import "_gnatprove_standard".Main

 function fibo_closest_value 
   (value : int) : int
 
 predicate fibo_closest_value__function_guard 
   (result : int) (value : int) 

end

(* Module for defining the constant "value" defined at fibonacci_functions.ads:26, created in Gnat2Why.Decls.Translate_Constant *)
module Fibonacci_functions__fibo_values_vector__value
 use import "_gnatprove_standard".Main

 function value #"fibonacci_functions.ads" 26 0 0#"model" "name:value" "model_trace:2896" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "value" defined at fibonacci_functions.ads:26, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Fibonacci_functions__fibo_values_vector__value___axiom
 use import "_gnatprove_standard".Main


end

(* Module for axiomatizing type "T17s" defined at fibonacci_functions.ads:32, created in Gnat2Why.Types.Translate_Type *)
module Fibonacci_functions__fibo_values_vector__L16s__T17s
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type t17s =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t17s, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t17s__ref =
  { mutable t17s__content "model_trace:" "name:" : t17s }
 
 function t17s__ref___projection 
   (a : t17s__ref) : t17s =
  a.t17s__content
 
 meta "model_projection" function t17s__ref___projection
 
 meta "inline : no" function t17s__ref___projection
 
 val t17s__havoc 
   (x : t17s__ref) : unit
  writes {x}

end

(* Module for possibly declaring a logic function for "fibo_values_vector" defined at fibonacci_functions.ads:26, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Fibonacci_functions__fibo_values_vector
 use import "_gnatprove_standard".Main
 use        Fibonacci_functions__arrayofints

 function fibo_values_vector 
   (value : int) : Fibonacci_functions__arrayofints.arrayofints
 
 predicate fibo_values_vector__function_guard 
   (result : Fibonacci_functions__arrayofints.arrayofints) (value : int) 

end

(* Module for defining the constant "value" defined at fibonacci_functions.ads:35, created in Gnat2Why.Decls.Translate_Constant *)
module Fibonacci_functions__fibo_is_fibo_value__value
 use import "_gnatprove_standard".Main

 function value #"fibonacci_functions.ads" 35 0 0#"model" "name:value" "model_trace:2946" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "value" defined at fibonacci_functions.ads:35, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Fibonacci_functions__fibo_is_fibo_value__value___axiom
 use import "_gnatprove_standard".Main


end

(* Module for axiomatizing type "T19s" defined at fibonacci_functions.ads:43, created in Gnat2Why.Types.Translate_Type *)
module Fibonacci_functions__fibo_is_fibo_value__L18s__T19s
 use import "_gnatprove_standard".Main
 use import "int".Int

 type t19s =
  < range 1 46 >
 
 function first 
   : int =
  1
 
 function last 
   : int =
  46
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = t19s, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type t19s__ref =
  { mutable t19s__content "model_trace:" "name:" : t19s }
 
 function t19s__ref___projection 
   (a : t19s__ref) : t19s =
  a.t19s__content
 
 meta "model_projection" function t19s__ref___projection
 
 meta "inline : no" function t19s__ref___projection
 
 val t19s__havoc 
   (x : t19s__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "T19s" defined at fibonacci_functions.ads:43, created in Gnat2Why.Types.Translate_Type *)
module Fibonacci_functions__fibo_is_fibo_value__L18s__T19s__rep
 use        Fibonacci_functions__fibo_is_fibo_value__L18s__T19s
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Fibonacci_functions__fibo_is_fibo_value__L18s__T19s.t19s) : int =
  (Fibonacci_functions__fibo_is_fibo_value__L18s__T19s.t19s'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Fibonacci_functions__fibo_is_fibo_value__L18s__T19s.t19s, 
 predicate in_range = Fibonacci_functions__fibo_is_fibo_value__L18s__T19s.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for possibly declaring a logic function for "fibo_is_fibo_value" defined at fibonacci_functions.ads:35, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Fibonacci_functions__fibo_is_fibo_value
 use import "_gnatprove_standard".Main

 function fibo_is_fibo_value 
   (value : int) : bool
 
 predicate fibo_is_fibo_value__function_guard 
   (result : bool) (value : int) 

end

(* Module for axiomatizing type "T1b" defined at fibonacci_functions.adb:10, created in Gnat2Why.Types.Translate_Type *)
module Fibonacci_functions__fibo_get_value__L_1__T1b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type t1b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t1b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t1b__ref =
  { mutable t1b__content "model_trace:" "name:" : t1b }
 
 function t1b__ref___projection 
   (a : t1b__ref) : t1b =
  a.t1b__content
 
 meta "model_projection" function t1b__ref___projection
 
 meta "inline : no" function t1b__ref___projection
 
 val t1b__havoc 
   (x : t1b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T4b" defined at fibonacci_functions.adb:29, created in Gnat2Why.Types.Translate_Type *)
module Fibonacci_functions__fibo_closest_value__L_2__T4b
 use import "_gnatprove_standard".Main
 use import "int".Int

 type t4b =
  < range 2 46 >
 
 function first 
   : int =
  2
 
 function last 
   : int =
  46
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = t4b, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type t4b__ref =
  { mutable t4b__content "model_trace:" "name:" : t4b }
 
 function t4b__ref___projection 
   (a : t4b__ref) : t4b =
  a.t4b__content
 
 meta "model_projection" function t4b__ref___projection
 
 meta "inline : no" function t4b__ref___projection
 
 val t4b__havoc 
   (x : t4b__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "T4b" defined at fibonacci_functions.adb:29, created in Gnat2Why.Types.Translate_Type *)
module Fibonacci_functions__fibo_closest_value__L_2__T4b__rep
 use        Fibonacci_functions__fibo_closest_value__L_2__T4b
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Fibonacci_functions__fibo_closest_value__L_2__T4b.t4b) : int =
  (Fibonacci_functions__fibo_closest_value__L_2__T4b.t4b'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Fibonacci_functions__fibo_closest_value__L_2__T4b.t4b, 
 predicate in_range = Fibonacci_functions__fibo_closest_value__L_2__T4b.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "TTresult_arraySP1" defined at fibonacci_functions.adb:51, created in Gnat2Why.Types.Translate_Type *)
module Fibonacci_functions__fibo_values_vector__TTresult_arraySP1
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type tTresult_arraySP1 =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = tTresult_arraySP1, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type tTresult_arraySP1__ref =
  { mutable tTresult_arraySP1__content "model_trace:" "name:" : tTresult_arraySP1 }
 
 function tTresult_arraySP1__ref___projection 
   (a : tTresult_arraySP1__ref) : tTresult_arraySP1 =
  a.tTresult_arraySP1__content
 
 meta "model_projection" function tTresult_arraySP1__ref___projection
 
 meta "inline : no" function tTresult_arraySP1__ref___projection
 
 val tTresult_arraySP1__havoc 
   (x : tTresult_arraySP1__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "Tresult_arrayS" defined at fibonacci_functions.adb:51, created in Gnat2Why.Types.Translate_Type *)
module Fibonacci_functions__fibo_values_vector__Tresult_arrayS
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer
 use        Standard__integer__rep
 use        Array__Int__Standard__integer
 use        Fibonacci_functions__fibo_values_vector__TTresult_arraySP1

 type component_type =
  Standard__integer.integer
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Standard__integer.map, 
 function array_bool_eq = Array__Int__Standard__integer.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Fibonacci_functions__fibo_values_vector__TTresult_arraySP1.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type tresult_arrayS =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 type tresult_arrayS__ref =
  { mutable tresult_arrayS__content "model_trace:" "name:" : tresult_arrayS }
 
 function tresult_arrayS__ref___projection 
   (a : tresult_arrayS__ref) : tresult_arrayS =
  a.tresult_arrayS__content
 
 meta "model_projection" function tresult_arrayS__ref___projection
 
 meta "inline : no" function tresult_arrayS__ref___projection
 
 val tresult_arrayS__havoc 
   (x : tresult_arrayS__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T9b" defined at fibonacci_functions.adb:51, created in Gnat2Why.Types.Translate_Type *)
module Fibonacci_functions__fibo_values_vector__T9b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type t9b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t9b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t9b__ref =
  { mutable t9b__content "model_trace:" "name:" : t9b }
 
 function t9b__ref___projection 
   (a : t9b__ref) : t9b =
  a.t9b__content
 
 meta "model_projection" function t9b__ref___projection
 
 meta "inline : no" function t9b__ref___projection
 
 val t9b__havoc 
   (x : t9b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T10b" defined at fibonacci_functions.adb:51, created in Gnat2Why.Types.Translate_Type *)
module Fibonacci_functions__fibo_values_vector__T10b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer
 use        Standard__integer__rep
 use        Array__Int__Standard__integer
 use        Fibonacci_functions__fibo_values_vector__T9b

 type component_type =
  Standard__integer.integer
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Standard__integer.map, 
 function array_bool_eq = Array__Int__Standard__integer.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Fibonacci_functions__fibo_values_vector__T9b.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type t10b =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 type t10b__ref =
  { mutable t10b__content "model_trace:" "name:" : t10b }
 
 function t10b__ref___projection 
   (a : t10b__ref) : t10b =
  a.t10b__content
 
 meta "model_projection" function t10b__ref___projection
 
 meta "inline : no" function t10b__ref___projection
 
 val t10b__havoc 
   (x : t10b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T11b" defined at fibonacci_functions.adb:53, created in Gnat2Why.Types.Translate_Type *)
module Fibonacci_functions__fibo_values_vector__L_3__T11b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type t11b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t11b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t11b__ref =
  { mutable t11b__content "model_trace:" "name:" : t11b }
 
 function t11b__ref___projection 
   (a : t11b__ref) : t11b =
  a.t11b__content
 
 meta "model_projection" function t11b__ref___projection
 
 meta "inline : no" function t11b__ref___projection
 
 val t11b__havoc 
   (x : t11b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T15b" defined at fibonacci_functions.adb:55, created in Gnat2Why.Types.Translate_Type *)
module Fibonacci_functions__fibo_values_vector__L_3__L14b__T15b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type t15b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t15b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t15b__ref =
  { mutable t15b__content "model_trace:" "name:" : t15b }
 
 function t15b__ref___projection 
   (a : t15b__ref) : t15b =
  a.t15b__content
 
 meta "model_projection" function t15b__ref___projection
 
 meta "inline : no" function t15b__ref___projection
 
 val t15b__havoc 
   (x : t15b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T13b" defined at fibonacci_functions.adb:55, created in Gnat2Why.Types.Translate_Type *)
module Fibonacci_functions__fibo_values_vector__L_3__L12b__T13b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type t13b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t13b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t13b__ref =
  { mutable t13b__content "model_trace:" "name:" : t13b }
 
 function t13b__ref___projection 
   (a : t13b__ref) : t13b =
  a.t13b__content
 
 meta "model_projection" function t13b__ref___projection
 
 meta "inline : no" function t13b__ref___projection
 
 val t13b__havoc 
   (x : t13b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T21b" defined at fibonacci_functions.adb:72, created in Gnat2Why.Types.Translate_Type *)
module Fibonacci_functions__fibo_is_fibo_value__L_4__L20b__T21b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type t21b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t21b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t21b__ref =
  { mutable t21b__content "model_trace:" "name:" : t21b }
 
 function t21b__ref___projection 
   (a : t21b__ref) : t21b =
  a.t21b__content
 
 meta "model_projection" function t21b__ref___projection
 
 meta "inline : no" function t21b__ref___projection
 
 val t21b__havoc 
   (x : t21b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T19b" defined at fibonacci_functions.adb:72, created in Gnat2Why.Types.Translate_Type *)
module Fibonacci_functions__fibo_is_fibo_value__L_4__L18b__T19b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type t19b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t19b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t19b__ref =
  { mutable t19b__content "model_trace:" "name:" : t19b }
 
 function t19b__ref___projection 
   (a : t19b__ref) : t19b =
  a.t19b__content
 
 meta "model_projection" function t19b__ref___projection
 
 meta "inline : no" function t19b__ref___projection
 
 val t19b__havoc 
   (x : t19b__ref) : unit
  writes {x}

end
(* Module for defining a ref holding the value of variable "aux0" defined at fibonacci_functions.adb:5, created in Gnat2Why.Decls.Translate_Variable *)
module Fibonacci_functions__fibo_get_value__aux0
 use import "_gnatprove_standard".Main

 val aux0 #"fibonacci_functions.adb" 5 0 0#"model_projected" "model_trace:2327" "name:aux0"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "aux0" defined at fibonacci_functions.adb:5, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Fibonacci_functions__fibo_get_value__aux0___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "aux1" defined at fibonacci_functions.adb:6, created in Gnat2Why.Decls.Translate_Variable *)
module Fibonacci_functions__fibo_get_value__aux1
 use import "_gnatprove_standard".Main

 val aux1 #"fibonacci_functions.adb" 6 0 0#"model_projected" "model_trace:2337" "name:aux1"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "aux1" defined at fibonacci_functions.adb:6, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Fibonacci_functions__fibo_get_value__aux1___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "aux2" defined at fibonacci_functions.adb:7, created in Gnat2Why.Decls.Translate_Variable *)
module Fibonacci_functions__fibo_get_value__aux2
 use import "_gnatprove_standard".Main

 val aux2 #"fibonacci_functions.adb" 7 0 0#"model_projected" "model_trace:2347" "name:aux2"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "aux2" defined at fibonacci_functions.adb:7, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Fibonacci_functions__fibo_get_value__aux2___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "j" defined at fibonacci_functions.adb:10, created in Gnat2Why.Decls.Translate_Variable *)
module Fibonacci_functions__fibo_get_value__L_1__j
 use import "_gnatprove_standard".Main

 val j #"fibonacci_functions.adb" 10 0 0#"model_projected" "model_trace:2365" "name:j"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "j" defined at fibonacci_functions.adb:10, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Fibonacci_functions__fibo_get_value__L_1__j___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "aux" defined at fibonacci_functions.adb:26, created in Gnat2Why.Decls.Translate_Variable *)
module Fibonacci_functions__fibo_closest_value__aux
 use import "_gnatprove_standard".Main

 val aux #"fibonacci_functions.adb" 26 0 0#"model_projected" "model_trace:2439" "name:aux"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "aux" defined at fibonacci_functions.adb:26, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Fibonacci_functions__fibo_closest_value__aux___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "pastaux" defined at fibonacci_functions.adb:27, created in Gnat2Why.Decls.Translate_Variable *)
module Fibonacci_functions__fibo_closest_value__pastaux
 use import "_gnatprove_standard".Main

 val pastaux #"fibonacci_functions.adb" 27 0 0#"model_projected" "model_trace:2451" "name:pastAux"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "pastaux" defined at fibonacci_functions.adb:27, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Fibonacci_functions__fibo_closest_value__pastaux___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "j" defined at fibonacci_functions.adb:29, created in Gnat2Why.Decls.Translate_Variable *)
module Fibonacci_functions__fibo_closest_value__L_2__j
 use import "_gnatprove_standard".Main

 val j #"fibonacci_functions.adb" 29 0 0#"model_projected" "model_trace:2464" "name:J"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "j" defined at fibonacci_functions.adb:29, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Fibonacci_functions__fibo_closest_value__L_2__j___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "result_array" defined at fibonacci_functions.adb:51, created in Gnat2Why.Decls.Translate_Variable *)
module Fibonacci_functions__fibo_values_vector__result_array
 use import "_gnatprove_standard".Main
 use        Standard__integer
 use        Array__Int__Standard__integer

 val result_array #"fibonacci_functions.adb" 51 0 0#"model_projected" "model_trace:2554" "name:result_array"  : Array__Int__Standard__integer.map__ref 
 
 function result_array__first #"fibonacci_functions.adb" 51 0 0#"model_projected" "name:result_array" "model_trace:2554'First" 
   : Standard__integer.integer
 
 function result_array__last #"fibonacci_functions.adb" 51 0 0#"model_projected" "name:result_array" "model_trace:2554'Last" 
   : Standard__integer.integer
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "result_array" defined at fibonacci_functions.adb:51, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Fibonacci_functions__fibo_values_vector__result_array___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "j" defined at fibonacci_functions.adb:53, created in Gnat2Why.Decls.Translate_Variable *)
module Fibonacci_functions__fibo_values_vector__L_3__j
 use import "_gnatprove_standard".Main

 val j #"fibonacci_functions.adb" 53 0 0#"model_projected" "name:j" "model_trace:2576"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "j" defined at fibonacci_functions.adb:53, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Fibonacci_functions__fibo_values_vector__L_3__j___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "index" defined at fibonacci_functions.adb:62, created in Gnat2Why.Decls.Translate_Variable *)
module Fibonacci_functions__fibo_is_fibo_value__index
 use import "_gnatprove_standard".Main

 val index #"fibonacci_functions.adb" 62 0 0#"model_projected" "model_trace:2644" "name:index"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "index" defined at fibonacci_functions.adb:62, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Fibonacci_functions__fibo_is_fibo_value__index___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "aux" defined at fibonacci_functions.adb:63, created in Gnat2Why.Decls.Translate_Variable *)
module Fibonacci_functions__fibo_is_fibo_value__aux
 use import "_gnatprove_standard".Main

 val aux #"fibonacci_functions.adb" 63 0 0#"model_projected" "name:aux" "model_trace:2654"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "aux" defined at fibonacci_functions.adb:63, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Fibonacci_functions__fibo_is_fibo_value__aux___axiom
 use import "_gnatprove_standard".Main


end
(* Module giving axioms for type "short_short_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_short_integer___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__short_short_integer

 predicate dynamic_invariant "inline" 
   (temp___expr_4 : int) (temp___is_init_0 : bool) (temp___skip_constant_1 : bool) (temp___do_toplevel_2 : bool) (temp___do_typ_inv_3 : bool)  =
  (if (( temp___is_init_0 \/ (Standard__short_short_integer.first <= Standard__short_short_integer.last) )) then (
   (Standard__short_short_integer.dynamic_property Standard__short_short_integer.first Standard__short_short_integer.last temp___expr_4)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_5 : int) (temp___skip_top_level_6 : bool)  =
  true

end

(* Module giving axioms for type "short_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_integer___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__short_integer

 predicate dynamic_invariant "inline" 
   (temp___expr_11 : int) (temp___is_init_7 : bool) (temp___skip_constant_8 : bool) (temp___do_toplevel_9 : bool) (temp___do_typ_inv_10 : bool)  =
  (if (( temp___is_init_7 \/ (Standard__short_integer.first <= Standard__short_integer.last) )) then (
   (Standard__short_integer.dynamic_property Standard__short_integer.first Standard__short_integer.last temp___expr_11)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_12 : int) (temp___skip_top_level_13 : bool)  =
  true

end

(* Module giving axioms for type "integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer

 predicate dynamic_invariant "inline" 
   (temp___expr_18 : int) (temp___is_init_14 : bool) (temp___skip_constant_15 : bool) (temp___do_toplevel_16 : bool) (temp___do_typ_inv_17 : bool)  =
  (if (( temp___is_init_14 \/ (Standard__integer.first <= Standard__integer.last) )) then (
   (Standard__integer.dynamic_property Standard__integer.first Standard__integer.last temp___expr_18)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_19 : int) (temp___skip_top_level_20 : bool)  =
  true

end

(* Module giving axioms for type "long_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_integer___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__long_integer

 predicate dynamic_invariant "inline" 
   (temp___expr_25 : int) (temp___is_init_21 : bool) (temp___skip_constant_22 : bool) (temp___do_toplevel_23 : bool) (temp___do_typ_inv_24 : bool)  =
  (if (( temp___is_init_21 \/ (Standard__long_integer.first <= Standard__long_integer.last) )) then (
   (Standard__long_integer.dynamic_property Standard__long_integer.first Standard__long_integer.last temp___expr_25)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_26 : int) (temp___skip_top_level_27 : bool)  =
  true

end

(* Module giving axioms for type "long_long_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_long_integer___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__long_long_integer

 predicate dynamic_invariant "inline" 
   (temp___expr_32 : int) (temp___is_init_28 : bool) (temp___skip_constant_29 : bool) (temp___do_toplevel_30 : bool) (temp___do_typ_inv_31 : bool)  =
  (if (( temp___is_init_28 \/ (Standard__long_long_integer.first <= Standard__long_long_integer.last) )) then (
   (Standard__long_long_integer.dynamic_property Standard__long_long_integer.first Standard__long_long_integer.last temp___expr_32)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_33 : int) (temp___skip_top_level_34 : bool)  =
  true

end

(* Module giving axioms for type "natural", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__natural___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__natural

 predicate dynamic_invariant "inline" 
   (temp___expr_39 : int) (temp___is_init_35 : bool) (temp___skip_constant_36 : bool) (temp___do_toplevel_37 : bool) (temp___do_typ_inv_38 : bool)  =
  (if (( temp___is_init_35 \/ (Standard__natural.first <= Standard__natural.last) )) then (
   (Standard__natural.dynamic_property Standard__natural.first Standard__natural.last temp___expr_39)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_40 : int) (temp___skip_top_level_41 : bool)  =
  true

end

(* Module giving axioms for type "positive", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__positive___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__positive

 predicate dynamic_invariant "inline" 
   (temp___expr_46 : int) (temp___is_init_42 : bool) (temp___skip_constant_43 : bool) (temp___do_toplevel_44 : bool) (temp___do_typ_inv_45 : bool)  =
  (if (( temp___is_init_42 \/ (Standard__positive.first <= Standard__positive.last) )) then (
   (Standard__positive.dynamic_property Standard__positive.first Standard__positive.last temp___expr_46)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_47 : int) (temp___skip_top_level_48 : bool)  =
  true

end

(* Module giving axioms for type "short_float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_float___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32
 use        Standard__short_float

 predicate dynamic_invariant "inline" 
   (temp___expr_53 : Float32.t) (temp___is_init_49 : bool) (temp___skip_constant_50 : bool) (temp___do_toplevel_51 : bool) (temp___do_typ_inv_52 : bool)  =
  (if (( temp___is_init_49 \/ (Float32.le Standard__short_float.first Standard__short_float.last) )) then (
   (Standard__short_float.dynamic_property Standard__short_float.first Standard__short_float.last temp___expr_53)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_54 : Float32.t) (temp___skip_top_level_55 : bool)  =
  true

end

(* Module giving axioms for type "float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__float___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32
 use        Standard__float

 predicate dynamic_invariant "inline" 
   (temp___expr_60 : Float32.t) (temp___is_init_56 : bool) (temp___skip_constant_57 : bool) (temp___do_toplevel_58 : bool) (temp___do_typ_inv_59 : bool)  =
  (if (( temp___is_init_56 \/ (Float32.le Standard__float.first Standard__float.last) )) then (
   (Standard__float.dynamic_property Standard__float.first Standard__float.last temp___expr_60)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_61 : Float32.t) (temp___skip_top_level_62 : bool)  =
  true

end

(* Module giving axioms for type "long_float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_float___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float64
 use        Standard__long_float

 predicate dynamic_invariant "inline" 
   (temp___expr_67 : Float64.t) (temp___is_init_63 : bool) (temp___skip_constant_64 : bool) (temp___do_toplevel_65 : bool) (temp___do_typ_inv_66 : bool)  =
  (if (( temp___is_init_63 \/ (Float64.le Standard__long_float.first Standard__long_float.last) )) then (
   (Standard__long_float.dynamic_property Standard__long_float.first Standard__long_float.last temp___expr_67)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_68 : Float64.t) (temp___skip_top_level_69 : bool)  =
  true

end

(* Module giving axioms for type "character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__character___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__character

 predicate dynamic_invariant "inline" 
   (temp___expr_74 : int) (temp___is_init_70 : bool) (temp___skip_constant_71 : bool) (temp___do_toplevel_72 : bool) (temp___do_typ_inv_73 : bool)  =
  (if (( temp___is_init_70 \/ (Standard__character.first <= Standard__character.last) )) then (
   (Standard__character.dynamic_property Standard__character.first Standard__character.last temp___expr_74)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_75 : int) (temp___skip_top_level_76 : bool)  =
  true

end

(* Module giving axioms for type "wide_character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_character___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__wide_character

 predicate dynamic_invariant "inline" 
   (temp___expr_81 : int) (temp___is_init_77 : bool) (temp___skip_constant_78 : bool) (temp___do_toplevel_79 : bool) (temp___do_typ_inv_80 : bool)  =
  (if (( temp___is_init_77 \/ (Standard__wide_character.first <= Standard__wide_character.last) )) then (
   (Standard__wide_character.dynamic_property Standard__wide_character.first Standard__wide_character.last temp___expr_81)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_82 : int) (temp___skip_top_level_83 : bool)  =
  true

end

(* Module giving axioms for type "wide_wide_character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_wide_character___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__wide_wide_character

 predicate dynamic_invariant "inline" 
   (temp___expr_88 : int) (temp___is_init_84 : bool) (temp___skip_constant_85 : bool) (temp___do_toplevel_86 : bool) (temp___do_typ_inv_87 : bool)  =
  (if (( temp___is_init_84 \/ (Standard__wide_wide_character.first <= Standard__wide_wide_character.last) )) then (
   (Standard__wide_wide_character.dynamic_property Standard__wide_wide_character.first Standard__wide_wide_character.last temp___expr_88)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_89 : int) (temp___skip_top_level_90 : bool)  =
  true

end

(* Module giving axioms for type "string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__string___axiom
 use import "_gnatprove_standard".Main
 use        Standard__string
 use        Standard__positive

 predicate dynamic_invariant "inline" 
   (temp___expr_96 : Standard__string.string) (temp___is_init_92 : bool) (temp___skip_constant_93 : bool) (temp___do_toplevel_94 : bool) (temp___do_typ_inv_95 : bool)  =
  (if (temp___skip_constant_93) then (
   true) else (
   (Standard__string.dynamic_property Standard__positive.first Standard__positive.last (Standard__string.first temp___expr_96) (Standard__string.last temp___expr_96))))

end

(* Module giving axioms for type "wide_string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_string___axiom
 use import "_gnatprove_standard".Main
 use        Standard__positive
 use        Standard__wide_string

 predicate dynamic_invariant "inline" 
   (temp___expr_103 : Standard__wide_string.wide_string) (temp___is_init_99 : bool) (temp___skip_constant_100 : bool) (temp___do_toplevel_101 : bool) (temp___do_typ_inv_102 : bool)  =
  (if (temp___skip_constant_100) then (
   true) else (
   (Standard__wide_string.dynamic_property Standard__positive.first Standard__positive.last (Standard__wide_string.first temp___expr_103) (Standard__wide_string.last temp___expr_103))))

end

(* Module giving axioms for type "wide_wide_string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_wide_string___axiom
 use import "_gnatprove_standard".Main
 use        Standard__positive
 use        Standard__wide_wide_string

 predicate dynamic_invariant "inline" 
   (temp___expr_110 : Standard__wide_wide_string.wide_wide_string) (temp___is_init_106 : bool) (temp___skip_constant_107 : bool) (temp___do_toplevel_108 : bool) (temp___do_typ_inv_109 : bool)  =
  (if (temp___skip_constant_107) then (
   true) else (
   (Standard__wide_wide_string.dynamic_property Standard__positive.first Standard__positive.last (Standard__wide_wide_string.first temp___expr_110) (Standard__wide_wide_string.last temp___expr_110))))

end

(* Module giving axioms for type "duration", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__duration___axiom
 use import "_gnatprove_standard".Main
 use        Standard__duration

 predicate dynamic_invariant "inline" 
   (temp___expr_116 : Standard__duration.duration) (temp___is_init_112 : bool) (temp___skip_constant_113 : bool) (temp___do_toplevel_114 : bool) (temp___do_typ_inv_115 : bool)  =
  true
 
 predicate default_initial_assumption "inline" 
   (temp___expr_117 : Standard__duration.duration) (temp___skip_top_level_118 : bool)  =
  true

end

(* Module giving axioms for type "integer_8", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_8___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer_8

 predicate dynamic_invariant "inline" 
   (temp___expr_123 : int) (temp___is_init_119 : bool) (temp___skip_constant_120 : bool) (temp___do_toplevel_121 : bool) (temp___do_typ_inv_122 : bool)  =
  (if (( temp___is_init_119 \/ (Standard__integer_8.first <= Standard__integer_8.last) )) then (
   (Standard__integer_8.dynamic_property Standard__integer_8.first Standard__integer_8.last temp___expr_123)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_124 : int) (temp___skip_top_level_125 : bool)  =
  true

end

(* Module giving axioms for type "integer_16", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_16___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer_16

 predicate dynamic_invariant "inline" 
   (temp___expr_130 : int) (temp___is_init_126 : bool) (temp___skip_constant_127 : bool) (temp___do_toplevel_128 : bool) (temp___do_typ_inv_129 : bool)  =
  (if (( temp___is_init_126 \/ (Standard__integer_16.first <= Standard__integer_16.last) )) then (
   (Standard__integer_16.dynamic_property Standard__integer_16.first Standard__integer_16.last temp___expr_130)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_131 : int) (temp___skip_top_level_132 : bool)  =
  true

end

(* Module giving axioms for type "integer_32", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_32___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer_32

 predicate dynamic_invariant "inline" 
   (temp___expr_137 : int) (temp___is_init_133 : bool) (temp___skip_constant_134 : bool) (temp___do_toplevel_135 : bool) (temp___do_typ_inv_136 : bool)  =
  (if (( temp___is_init_133 \/ (Standard__integer_32.first <= Standard__integer_32.last) )) then (
   (Standard__integer_32.dynamic_property Standard__integer_32.first Standard__integer_32.last temp___expr_137)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_138 : int) (temp___skip_top_level_139 : bool)  =
  true

end

(* Module giving axioms for type "integer_64", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_64___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer_64

 predicate dynamic_invariant "inline" 
   (temp___expr_144 : int) (temp___is_init_140 : bool) (temp___skip_constant_141 : bool) (temp___do_toplevel_142 : bool) (temp___do_typ_inv_143 : bool)  =
  (if (( temp___is_init_140 \/ (Standard__integer_64.first <= Standard__integer_64.last) )) then (
   (Standard__integer_64.dynamic_property Standard__integer_64.first Standard__integer_64.last temp___expr_144)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_145 : int) (temp___skip_top_level_146 : bool)  =
  true

end

(* Module giving axioms for type "universal_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__universal_integer___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__universal_integer

 predicate dynamic_invariant "inline" 
   (temp___expr_151 : int) (temp___is_init_147 : bool) (temp___skip_constant_148 : bool) (temp___do_toplevel_149 : bool) (temp___do_typ_inv_150 : bool)  =
  (if (( temp___is_init_147 \/ (Standard__universal_integer.first <= Standard__universal_integer.last) )) then (
   (Standard__universal_integer.dynamic_property Standard__universal_integer.first Standard__universal_integer.last temp___expr_151)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_152 : int) (temp___skip_top_level_153 : bool)  =
  true

end

(* Module for defining the loop exit exception for the loop "L_1" defined at fibonacci_functions.adb:10, created in Gnat2Why.Decls.Translate_Loop_Entity *)
module Fibonacci_functions__fibo_get_value__L_1
 use import "_gnatprove_standard".Main

 exception L_1

end

(* Module giving an empty axiom for the entity "L_1" defined at fibonacci_functions.adb:10, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Fibonacci_functions__fibo_get_value__L_1___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the loop exit exception for the loop "L_2" defined at fibonacci_functions.adb:29, created in Gnat2Why.Decls.Translate_Loop_Entity *)
module Fibonacci_functions__fibo_closest_value__L_2
 use import "_gnatprove_standard".Main

 exception L_2

end

(* Module giving an empty axiom for the entity "L_2" defined at fibonacci_functions.adb:29, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Fibonacci_functions__fibo_closest_value__L_2___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the loop exit exception for the loop "L_3" defined at fibonacci_functions.adb:53, created in Gnat2Why.Decls.Translate_Loop_Entity *)
module Fibonacci_functions__fibo_values_vector__L_3
 use import "_gnatprove_standard".Main

 exception L_3

end

(* Module giving an empty axiom for the entity "L_3" defined at fibonacci_functions.adb:53, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Fibonacci_functions__fibo_values_vector__L_3___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the loop exit exception for the loop "L_4" defined at fibonacci_functions.adb:65, created in Gnat2Why.Decls.Translate_Loop_Entity *)
module Fibonacci_functions__fibo_is_fibo_value__L_4
 use import "_gnatprove_standard".Main

 exception L_4

end

(* Module giving an empty axiom for the entity "L_4" defined at fibonacci_functions.adb:65, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Fibonacci_functions__fibo_is_fibo_value__L_4___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "arrayofints" defined at fibonacci_functions.ads:5, created in Gnat2Why.Types.Generate_Type_Completion *)
module Fibonacci_functions__arrayofints___axiom
 use import "_gnatprove_standard".Main
 use        Standard__positive
 use        Fibonacci_functions__arrayofints

 predicate dynamic_invariant "inline" 
   (temp___expr_159 : Fibonacci_functions__arrayofints.arrayofints) (temp___is_init_155 : bool) (temp___skip_constant_156 : bool) (temp___do_toplevel_157 : bool) (temp___do_typ_inv_158 : bool)  =
  (if (temp___skip_constant_156) then (
   true) else (
   (Fibonacci_functions__arrayofints.dynamic_property Standard__positive.first Standard__positive.last (Fibonacci_functions__arrayofints.first temp___expr_159) (Fibonacci_functions__arrayofints.last temp___expr_159))))

end

(* Module giving axioms for type "T17s" defined at fibonacci_functions.ads:32, created in Gnat2Why.Types.Generate_Type_Completion *)
module Fibonacci_functions__fibo_values_vector__L16s__T17s___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T19s" defined at fibonacci_functions.ads:43, created in Gnat2Why.Types.Generate_Type_Completion *)
module Fibonacci_functions__fibo_is_fibo_value__L18s__T19s___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T1b" defined at fibonacci_functions.adb:10, created in Gnat2Why.Types.Generate_Type_Completion *)
module Fibonacci_functions__fibo_get_value__L_1__T1b___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T4b" defined at fibonacci_functions.adb:29, created in Gnat2Why.Types.Generate_Type_Completion *)
module Fibonacci_functions__fibo_closest_value__L_2__T4b___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "TTresult_arraySP1" defined at fibonacci_functions.adb:51, created in Gnat2Why.Types.Generate_Type_Completion *)
module Fibonacci_functions__fibo_values_vector__TTresult_arraySP1___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "Tresult_arrayS" defined at fibonacci_functions.adb:51, created in Gnat2Why.Types.Generate_Type_Completion *)
module Fibonacci_functions__fibo_values_vector__Tresult_arrayS___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Fibonacci_functions__fibo_values_vector__value
 use        Fibonacci_functions__fibo_values_vector__Tresult_arrayS

 predicate dynamic_invariant "inline" 
   (temp___expr_171 : Fibonacci_functions__fibo_values_vector__Tresult_arrayS.tresult_arrayS) (temp___is_init_167 : bool) (temp___skip_constant_168 : bool) (temp___do_toplevel_169 : bool) (temp___do_typ_inv_170 : bool)  =
  (if (temp___skip_constant_168) then (
   true) else (
   ( (Fibonacci_functions__fibo_values_vector__Tresult_arrayS.dynamic_property 1 Fibonacci_functions__fibo_values_vector__value.value (Fibonacci_functions__fibo_values_vector__Tresult_arrayS.first temp___expr_171) (Fibonacci_functions__fibo_values_vector__Tresult_arrayS.last temp___expr_171)) /\ ( ((Fibonacci_functions__fibo_values_vector__Tresult_arrayS.first temp___expr_171) = 1) /\ ((Fibonacci_functions__fibo_values_vector__Tresult_arrayS.last temp___expr_171) = Fibonacci_functions__fibo_values_vector__value.value) ) )))
 
 predicate default_initial_assumption "inline" 
   (temp___expr_173 : Fibonacci_functions__fibo_values_vector__Tresult_arrayS.tresult_arrayS) (temp___skip_top_level_174 : bool)  =
  true

end

(* Module giving axioms for type "T9b" defined at fibonacci_functions.adb:51, created in Gnat2Why.Types.Generate_Type_Completion *)
module Fibonacci_functions__fibo_values_vector__T9b___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T10b" defined at fibonacci_functions.adb:51, created in Gnat2Why.Types.Generate_Type_Completion *)
module Fibonacci_functions__fibo_values_vector__T10b___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T11b" defined at fibonacci_functions.adb:53, created in Gnat2Why.Types.Generate_Type_Completion *)
module Fibonacci_functions__fibo_values_vector__L_3__T11b___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T15b" defined at fibonacci_functions.adb:55, created in Gnat2Why.Types.Generate_Type_Completion *)
module Fibonacci_functions__fibo_values_vector__L_3__L14b__T15b___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T13b" defined at fibonacci_functions.adb:55, created in Gnat2Why.Types.Generate_Type_Completion *)
module Fibonacci_functions__fibo_values_vector__L_3__L12b__T13b___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T21b" defined at fibonacci_functions.adb:72, created in Gnat2Why.Types.Generate_Type_Completion *)
module Fibonacci_functions__fibo_is_fibo_value__L_4__L20b__T21b___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T19b" defined at fibonacci_functions.adb:72, created in Gnat2Why.Types.Generate_Type_Completion *)
module Fibonacci_functions__fibo_is_fibo_value__L_4__L18b__T19b___axiom
 use import "_gnatprove_standard".Main


end

(* Module for declaring an abstract function for the aggregate at fibonacci_functions.adb:51, created in Gnat2Why.Expr.Transform_Aggregate.Generate_Logic_Function *)
module Fibonacci_functions__fibo_values_vector__result_array__aggregate_def
 use import "_gnatprove_standard".Main
 use        Fibonacci_functions__fibo_values_vector__T10b

 function fibonacci_functions__fibo_values_vector__result_array__aggregate_def 
   (temp___189 : int) (temp___190 : int) (temp___191 : int) : Fibonacci_functions__fibo_values_vector__T10b.t10b

end
(* Module for declaring a program function (and possibly an axiom) for "fibo_get_value" defined at fibonacci_functions.ads:7, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Fibonacci_functions__fibo_get_value___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__natural___axiom
 use        Standard__positive___axiom
 use        Fibonacci_functions__fibo_get_value

 val fibo_get_value 
   (value : int) : int
  requires {  ( (value > 0) /\ (value <= 46) ) }
  ensures {  ( ( (result = (Fibonacci_functions__fibo_get_value.fibo_get_value value)) /\ (Fibonacci_functions__fibo_get_value.fibo_get_value__function_guard result value) ) /\ ( (Standard__natural___axiom.dynamic_invariant result True False True True) /\ ( (result <= 1836311903) /\ (result > 0) ) ) ) }
 
 axiom fibo_get_value__post_axiom :
  (forall value   : int [(Fibonacci_functions__fibo_get_value.fibo_get_value value)].
   ( ( (Standard__positive___axiom.dynamic_invariant value True True True True) /\ ( (value > 0) /\ (value <= 46) ) ) -> (let result = (Fibonacci_functions__fibo_get_value.fibo_get_value value) in (
    (if ((Fibonacci_functions__fibo_get_value.fibo_get_value__function_guard result value)) then (
     ( ( ( (result <= 1836311903) /\ (result > 0) ) /\ (Standard__natural___axiom.dynamic_invariant result True False True True) ) /\ true )) else true)))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "fibo_closest_value" defined at fibonacci_functions.ads:16, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Fibonacci_functions__fibo_closest_value___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__natural___axiom
 use        Fibonacci_functions__fibo_closest_value

 val fibo_closest_value 
   (value : int) : int
  requires {  ( (value <= 1836311903) /\ (value > 0) ) }
  ensures {  ( ( (result = (Fibonacci_functions__fibo_closest_value.fibo_closest_value value)) /\ (Fibonacci_functions__fibo_closest_value.fibo_closest_value__function_guard result value) ) /\ ( (Standard__natural___axiom.dynamic_invariant result True False True True) /\ ( (result <= 1836311903) /\ (result >= 1) ) ) ) }
 
 axiom fibo_closest_value__post_axiom :
  (forall value   : int [(Fibonacci_functions__fibo_closest_value.fibo_closest_value value)].
   ( ( (Standard__natural___axiom.dynamic_invariant value True True True True) /\ ( (value <= 1836311903) /\ (value > 0) ) ) -> (let result = (Fibonacci_functions__fibo_closest_value.fibo_closest_value value) in (
    (if ((Fibonacci_functions__fibo_closest_value.fibo_closest_value__function_guard result value)) then (
     ( ( ( (result <= 1836311903) /\ (result >= 1) ) /\ (Standard__natural___axiom.dynamic_invariant result True False True True) ) /\ true )) else true)))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "fibo_values_vector" defined at fibonacci_functions.ads:26, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Fibonacci_functions__fibo_values_vector___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep
 use        Standard__positive___axiom
 use        Fibonacci_functions__fibo_get_value
 use        Fibonacci_functions__arrayofints
 use        Fibonacci_functions__fibo_values_vector
 use        Array__Int__Standard__integer
 use        Fibonacci_functions__arrayofints___axiom
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer

 val fibo_values_vector 
   (value : int) : Fibonacci_functions__arrayofints.arrayofints
  requires {  (value <= 46) }
  ensures {  ( ( (result = (Fibonacci_functions__fibo_values_vector.fibo_values_vector value)) /\ (Fibonacci_functions__fibo_values_vector.fibo_values_vector__function_guard result value) ) /\ ( (Fibonacci_functions__arrayofints___axiom.dynamic_invariant result True False True True) /\ (forall j   "model" "name:J" "model_trace:2918"  : int.
   ( ( ((Fibonacci_functions__arrayofints.first result) <= j) /\ (j <= (Fibonacci_functions__arrayofints.last result)) ) -> ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (Fibonacci_functions__arrayofints.to_array result) j)) = (epsilon temp___result_161 : int.
    ( (temp___result_161 = (Fibonacci_functions__fibo_get_value.fibo_get_value j)) /\ (Fibonacci_functions__fibo_get_value.fibo_get_value__function_guard temp___result_161 j) ))) )) ) ) }
 
 axiom fibo_values_vector__post_axiom :
  (forall value   : int [(Fibonacci_functions__fibo_values_vector.fibo_values_vector value)].
   ( ( (Standard__positive___axiom.dynamic_invariant value True True True True) /\ (value <= 46) ) -> (let result = (Fibonacci_functions__fibo_values_vector.fibo_values_vector value) in (
    (if ((Fibonacci_functions__fibo_values_vector.fibo_values_vector__function_guard result value)) then (
     ( ( (forall j   "model" "name:J" "model_trace:2918"  : int.
      ( ( ((Fibonacci_functions__arrayofints.first result) <= j) /\ (j <= (Fibonacci_functions__arrayofints.last result)) ) -> ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (Fibonacci_functions__arrayofints.to_array result) j)) = (epsilon temp___result_163 : int.
       ( (temp___result_163 = (Fibonacci_functions__fibo_get_value.fibo_get_value j)) /\ (Fibonacci_functions__fibo_get_value.fibo_get_value__function_guard temp___result_163 j) ))) )) /\ (Fibonacci_functions__arrayofints___axiom.dynamic_invariant result True False True True) ) /\ true )) else true)))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "fibo_is_fibo_value" defined at fibonacci_functions.ads:35, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Fibonacci_functions__fibo_is_fibo_value___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__natural___axiom
 use        Fibonacci_functions__fibo_get_value
 use        Fibonacci_functions__fibo_is_fibo_value

 val fibo_is_fibo_value 
   (value : int) : bool
  requires {  ( (value <= 1836311903) /\ (value > 0) ) }
  ensures {  ( ( (result = (Fibonacci_functions__fibo_is_fibo_value.fibo_is_fibo_value value)) /\ (Fibonacci_functions__fibo_is_fibo_value.fibo_is_fibo_value__function_guard result value) ) /\ (if (( (result = True) <-> true )) then (
   (exists j  : int.
    ( ( (1 <= j) /\ (j <= 46) ) /\ ((epsilon temp___result_165 : int.
     ( (temp___result_165 = (Fibonacci_functions__fibo_get_value.fibo_get_value j)) /\ (Fibonacci_functions__fibo_get_value.fibo_get_value__function_guard temp___result_165 j) )) = value) ))) else (
   true)) ) }
 
 axiom fibo_is_fibo_value__post_axiom :
  (forall value   : int [(Fibonacci_functions__fibo_is_fibo_value.fibo_is_fibo_value value)].
   ( ( (Standard__natural___axiom.dynamic_invariant value True True True True) /\ ( (value <= 1836311903) /\ (value > 0) ) ) -> (let result = (Fibonacci_functions__fibo_is_fibo_value.fibo_is_fibo_value value) in (
    (if ((Fibonacci_functions__fibo_is_fibo_value.fibo_is_fibo_value__function_guard result value)) then (
     ( ( (if (( (result = True) <-> true )) then (
      (exists j  : int.
       ( ( (1 <= j) /\ (j <= 46) ) /\ ((epsilon temp___result_166 : int.
        ( (temp___result_166 = (Fibonacci_functions__fibo_get_value.fibo_get_value j)) /\ (Fibonacci_functions__fibo_get_value.fibo_get_value__function_guard temp___result_166 j) )) = value) ))) else (
      true)) /\ true ) /\ true )) else true)))
    ))

end

(* Module for checking absence of run-time errors and package initial condition on package elaboration of "fibonacci_functions" defined at fibonacci_functions.ads:1, created in Gnat2Why.Subprograms.Generate_VCs_For_Package_Elaboration *)
module Fibonacci_functions__package_def
 use import "_gnatprove_standard".Main

 let def #"fibonacci_functions.ads" 1 0 0#"GP_Subp:fibonacci_functions.ads:1" "W:diverges:N" 
   (__void_param : unit)
  requires { #"fibonacci_functions.ads" 1 0 0# true }
  ensures { #"fibonacci_functions.ads" 1 0 0# true }
   =
  ( (#"fibonacci_functions.ads" 2 0 0# ());
  (#"fibonacci_functions.ads" 5 0 0# ());
  (#"fibonacci_functions.ads" 7 0 0# ());
  (#"fibonacci_functions.ads" 13 0 0# ());
  (#"fibonacci_functions.ads" 13 0 0# ());
  (#"fibonacci_functions.ads" 11 0 0# ());
  (#"fibonacci_functions.ads" 10 0 0# ());
  (#"fibonacci_functions.ads" 16 0 0# ());
  (#"fibonacci_functions.ads" 23 0 0# ());
  (#"fibonacci_functions.ads" 22 0 0# ());
  (#"fibonacci_functions.ads" 20 0 0# ());
  (#"fibonacci_functions.ads" 19 0 0# ());
  (#"fibonacci_functions.ads" 26 0 0# ());
  (#"fibonacci_functions.ads" 31 0 0# ());
  (#"fibonacci_functions.ads" 29 0 0# ());
  (#"fibonacci_functions.ads" 35 0 0# ());
  (#"fibonacci_functions.ads" 41 0 0# ());
  (#"fibonacci_functions.ads" 39 0 0# ());
  (#"fibonacci_functions.ads" 38 0 0# ());
  (#"fibonacci_functions.ads" 38 0 0# ());
  (#"fibonacci_functions.ads" 38 0 0# ());
  (#"fibonacci_functions.adb" 2 0 0# ());
  (#"fibonacci_functions.adb" 4 0 0# ());
  (#"fibonacci_functions.adb" 25 0 0# ());
  (#"fibonacci_functions.adb" 50 0 0# ());
  (#"fibonacci_functions.adb" 61 0 0# ());
  ( "GP_Sloc:fibonacci_functions.adb:79:1" (#"fibonacci_functions.adb" 79 0 0# ()) ) )
end

(* Module for checking contracts and absence of run-time errors in subprogram "fibo_get_value" defined at fibonacci_functions.ads:7, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Fibonacci_functions__fibo_get_value__subprogram_def
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        Standard__integer
 use        Standard__natural___axiom
 use        Standard__positive___axiom
 use        Fibonacci_functions__fibo_get_value__value
 use        Fibonacci_functions__fibo_get_value__aux0
 use        Fibonacci_functions__fibo_get_value__aux1
 use        Fibonacci_functions__fibo_get_value__aux2
 use        Fibonacci_functions__fibo_get_value__L_1
 use        Fibonacci_functions__fibo_get_value__L_1__T1b
 use        Fibonacci_functions__fibo_get_value__L_1__j
 use        Standard__natural___axiom
 use        Standard__positive___axiom
 use        Standard__integer___axiom
 use        Fibonacci_functions__fibo_get_value__aux0___axiom
 use        Fibonacci_functions__fibo_get_value__aux1___axiom
 use        Fibonacci_functions__fibo_get_value__aux2___axiom
 use        Fibonacci_functions__fibo_get_value__L_1__j___axiom
 use        Fibonacci_functions__fibo_get_value__L_1___axiom
 use        Fibonacci_functions__fibo_get_value__value___axiom
 use        Fibonacci_functions__fibo_get_value__L_1__T1b___axiom

 val fibonacci_functions__fibo_get_value__result "model_projected" "model_trace:2801@result" "name:fibo_get_value"  : int__ref 
 
 let def #"fibonacci_functions.ads" 7 0 0#"W:diverges:N" "GP_Subp:fibonacci_functions.ads:7" 
   (__void_param : unit)
  requires { #"fibonacci_functions.ads" 7 0 0# true }
  ensures { #"fibonacci_functions.ads" 7 0 0# (#"fibonacci_functions.ads" 13 0 0# ( "model_vc_post" "keep_on_simp" "GP_Sloc:fibonacci_functions.ads:13:16" "GP_Reason:VC_POSTCONDITION" "GP_Id:3" "comment:       Post => fibo_get_value'Result <= 1836311903
               ^ fibonacci_functions.ads:13:16:VC_POSTCONDITION" "GP_Shape:pragargs__cmp" ( ( "GP_Pretty_Ada:3078" "GP_Sloc:fibonacci_functions.ads:13:16" (fibonacci_functions__fibo_get_value__result.int__content <= 1836311903) ) /\ ( "GP_Pretty_Ada:2844" "GP_Sloc:fibonacci_functions.ads:14:41" (fibonacci_functions__fibo_get_value__result.int__content > 0) ) ) )) }
   =
  ( () (* Assume dynamic invariants of inputs of the subprogram fibonacci_functions.ads:7 *)
  ;
   assume {  (Standard__positive___axiom.dynamic_invariant Fibonacci_functions__fibo_get_value__value.value True False True True) };
   assume {  true };
  () (* Declarations introduced by the compiler at the beginning of the subprogram fibonacci_functions.ads:7 *)
  ;
  () (* Check for RTE in the Pre of the subprogram fibonacci_functions.ads:7 *)
  ;
   abstract ensures {true}(let _ = ( (Fibonacci_functions__fibo_get_value__value.value > 0) && (Fibonacci_functions__fibo_get_value__value.value <= 46) ) in (
   ()))
   end ;
  () (* Assume Pre of the subprogram fibonacci_functions.ads:7 *)
  ;
   assume {  ( (Fibonacci_functions__fibo_get_value__value.value > 0) /\ (Fibonacci_functions__fibo_get_value__value.value <= 46) ) };
   try
   ( (#"fibonacci_functions.adb" 5 0 0# ( #"fibonacci_functions.adb" 5 0 0# Fibonacci_functions__fibo_get_value__aux0.aux0.int__content <- ( 0 );
   #"fibonacci_functions.adb" 5 0 0# assume { #"fibonacci_functions.adb" 5 0 0# (Standard__natural___axiom.dynamic_invariant Fibonacci_functions__fibo_get_value__aux0.aux0.int__content True False True True) } ));
   (#"fibonacci_functions.adb" 6 0 0# ( #"fibonacci_functions.adb" 6 0 0# Fibonacci_functions__fibo_get_value__aux1.aux1.int__content <- ( 1 );
   #"fibonacci_functions.adb" 6 0 0# assume { #"fibonacci_functions.adb" 6 0 0# (Standard__natural___axiom.dynamic_invariant Fibonacci_functions__fibo_get_value__aux1.aux1.int__content True False True True) } ));
   (#"fibonacci_functions.adb" 7 0 0# ( #"fibonacci_functions.adb" 7 0 0# abstract ensures {true}(let _ = () in (
    ()))
    end ;
   #"fibonacci_functions.adb" 7 0 0# assume { #"fibonacci_functions.adb" 7 0 0# (Standard__natural___axiom.default_initial_assumption Fibonacci_functions__fibo_get_value__aux2.aux2.int__content False) };
   #"fibonacci_functions.adb" 7 0 0# assume { #"fibonacci_functions.adb" 7 0 0# (Standard__natural___axiom.dynamic_invariant Fibonacci_functions__fibo_get_value__aux2.aux2.int__content False False True True) } ));
   (#"fibonacci_functions.adb" 10 0 0# ());
   ( "GP_Sloc:fibonacci_functions.adb:9:7" (#"fibonacci_functions.adb" 9 0 0# (if ((Fibonacci_functions__fibo_get_value__value.value >= 2)) then (
    ( "GP_Sloc:fibonacci_functions.adb:10:28" (#"fibonacci_functions.adb" 10 0 0# (let temp___177 = 2 in (
    (let temp___178 = Fibonacci_functions__fibo_get_value__value.value in (
     ( #"fibonacci_functions.adb" 10 0 0# Fibonacci_functions__fibo_get_value__L_1__j.j.int__content <- ( temp___177 );
     () (* Translation of an Ada loop from fibonacci_functions.adb:10 *)
     ;
     (if ((Boolean.andb((temp___177 <= Fibonacci_functions__fibo_get_value__L_1__j.j.int__content)) ((Fibonacci_functions__fibo_get_value__L_1__j.j.int__content <= temp___178)))) then (
      #"fibonacci_functions.adb" 10 0 0# try
       ( #"fibonacci_functions.adb" 10 0 0# abstract ensures {true}(let _ = Fibonacci_functions__fibo_get_value__aux0.aux0.int__content in (
        ()))
        end ;
       (let temp___182 = #"fibonacci_functions.adb" 10 0 0# (any int
       ensures {#"fibonacci_functions.adb" 10 0 0# (result = Fibonacci_functions__fibo_get_value__aux0.aux0.int__content)} 
       ) in (
        ( #"fibonacci_functions.adb" 10 0 0# abstract ensures {true}(let _ = Fibonacci_functions__fibo_get_value__L_1__j.j.int__content in (
         ()))
         end ;
        (let temp___181 = #"fibonacci_functions.adb" 10 0 0# (any int
        ensures {#"fibonacci_functions.adb" 10 0 0# (result = Fibonacci_functions__fibo_get_value__L_1__j.j.int__content)} 
        ) in (
         ( #"fibonacci_functions.adb" 10 0 0# abstract ensures {true}(let _ = Fibonacci_functions__fibo_get_value__aux2.aux2.int__content in (
          ()))
          end ;
         (let temp___180 = #"fibonacci_functions.adb" 10 0 0# (any int
         ensures {#"fibonacci_functions.adb" 10 0 0# (result = Fibonacci_functions__fibo_get_value__aux2.aux2.int__content)} 
         ) in (
          ( #"fibonacci_functions.adb" 10 0 0# abstract ensures {true}(let _ = Fibonacci_functions__fibo_get_value__aux1.aux1.int__content in (
           ()))
           end ;
          (let temp___179 = #"fibonacci_functions.adb" 10 0 0# (any int
          ensures {#"fibonacci_functions.adb" 10 0 0# (result = Fibonacci_functions__fibo_get_value__aux1.aux1.int__content)} 
          ) in (
           ( () (* First unroling of the loop statements appearing before the loop invariant of loop fibonacci_functions.adb:10 *)
           ;
           ( "GP_Sloc:fibonacci_functions.adb:11:16" (#"fibonacci_functions.adb" 11 0 0# ()) );
           ( "GP_Sloc:fibonacci_functions.adb:11:37" (#"fibonacci_functions.adb" 11 0 0# ()) );
           ( "GP_Sloc:fibonacci_functions.adb:11:13" (#"fibonacci_functions.adb" 11 0 0# (if ((Fibonacci_functions__fibo_get_value__aux1.aux1.int__content <= (1836311903 - Fibonacci_functions__fibo_get_value__aux0.aux0.int__content))) then (
            ( ( "GP_Sloc:fibonacci_functions.adb:12:16" (#"fibonacci_functions.adb" 12 0 0# ()) );
            ( "GP_Sloc:fibonacci_functions.adb:12:24" (#"fibonacci_functions.adb" 12 0 0# ()) );
            ( "GP_Sloc:fibonacci_functions.adb:12:21" (#"fibonacci_functions.adb" 12 0 0# #"fibonacci_functions.adb" 12 0 0# Fibonacci_functions__fibo_get_value__aux2.aux2.int__content <- ( Fibonacci_functions__fibo_get_value__aux1.aux1.int__content )) );
            ( "GP_Sloc:fibonacci_functions.adb:13:16" (#"fibonacci_functions.adb" 13 0 0# ()) );
            ( "GP_Sloc:fibonacci_functions.adb:13:24" (#"fibonacci_functions.adb" 13 0 0# ()) );
            ( "GP_Sloc:fibonacci_functions.adb:13:31" (#"fibonacci_functions.adb" 13 0 0# ()) );
            ( "GP_Sloc:fibonacci_functions.adb:13:21" (#"fibonacci_functions.adb" 13 0 0# #"fibonacci_functions.adb" 13 0 0# Fibonacci_functions__fibo_get_value__aux1.aux1.int__content <- ( (#"fibonacci_functions.adb" 13 0 0# ( "model_vc" "keep_on_simp" "GP_Sloc:fibonacci_functions.adb:13:29" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Id:0" "comment:               aux1 := aux0 + aux1;
                            ^ fibonacci_functions.adb:13:29:VC_OVERFLOW_CHECK" "GP_Shape:if__L_1_while__if__aux1_assign__add" (Standard__integer.range_check_((Fibonacci_functions__fibo_get_value__aux0.aux0.int__content + Fibonacci_functions__fibo_get_value__aux1.aux1.int__content))) )) )) );
            ( "GP_Sloc:fibonacci_functions.adb:14:16" (#"fibonacci_functions.adb" 14 0 0# ()) );
            ( "GP_Sloc:fibonacci_functions.adb:14:24" (#"fibonacci_functions.adb" 14 0 0# ()) );
            ( "GP_Sloc:fibonacci_functions.adb:14:21" (#"fibonacci_functions.adb" 14 0 0# #"fibonacci_functions.adb" 14 0 0# Fibonacci_functions__fibo_get_value__aux0.aux0.int__content <- ( Fibonacci_functions__fibo_get_value__aux2.aux2.int__content )) ) )) else (
            ( "GP_Sloc:fibonacci_functions.adb:16:16" (#"fibonacci_functions.adb" 16 0 0# ( #"fibonacci_functions.adb" 16 0 0# fibonacci_functions__fibo_get_value__result.int__content <- ( 1836311903 );
            #"fibonacci_functions.adb" 16 0 0# raise Return__exc )) )))) );
           () (* While loop translating the Ada loop from fibonacci_functions.adb:10 *)
           ;
            while True do
            invariant { 
             (#"fibonacci_functions.adb" 18 0 0# ( "model_vc" "keep_on_simp" "GP_Sloc:fibonacci_functions.adb:18:36" "GP_Reason:VC_LOOP_INVARIANT" "GP_Id:1" "comment:            Pragma Loop_Invariant (aux1 <= 1836311903);
                                   ^ fibonacci_functions.adb:18:36:VC_LOOP_INVARIANT" "GP_Shape:if__L_1_while__pragargs__cmp" ( "GP_Pretty_Ada:2405" "GP_Sloc:fibonacci_functions.adb:18:36" (Fibonacci_functions__fibo_get_value__aux1.aux1.int__content <= 1836311903) ) ))
             }
            invariant { 
             (#"fibonacci_functions.adb" 19 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_LOOP_INVARIANT" "GP_Shape:if__L_1_while__pragargs__cmp" "GP_Sloc:fibonacci_functions.adb:19:36" "GP_Id:2" "comment:            Pragma Loop_Invariant (aux1 > 0);
                                   ^ fibonacci_functions.adb:19:36:VC_LOOP_INVARIANT" ( "GP_Pretty_Ada:2412" "GP_Sloc:fibonacci_functions.adb:19:36" (Fibonacci_functions__fibo_get_value__aux1.aux1.int__content > 0) ) ))
             }
            ( () (* Assume implicit invariants from the loop fibonacci_functions.adb:10 *)
            ;
             assume {  (Boolean.andb(( ( ( ( ( ( ( ( true /\ (Standard__natural___axiom.dynamic_invariant Fibonacci_functions__fibo_get_value__aux1.aux1.int__content False True True True) ) /\ true ) /\ (Standard__natural___axiom.dynamic_invariant Fibonacci_functions__fibo_get_value__aux2.aux2.int__content False True True True) ) /\ true ) /\ (if ((2 <= Fibonacci_functions__fibo_get_value__value.value)) then (
             (Fibonacci_functions__fibo_get_value__L_1__T1b.dynamic_property 2 Fibonacci_functions__fibo_get_value__value.value Fibonacci_functions__fibo_get_value__L_1__j.j.int__content)) else true) ) /\ true ) /\ (Standard__natural___axiom.dynamic_invariant Fibonacci_functions__fibo_get_value__aux0.aux0.int__content False True True True) ) /\ true )) (( (2 <= Fibonacci_functions__fibo_get_value__L_1__j.j.int__content) /\ (Fibonacci_functions__fibo_get_value__L_1__j.j.int__content <= Fibonacci_functions__fibo_get_value__value.value) ))) };
            () (* Check for absence of RTE in the invariant of loop fibonacci_functions.adb:10 *)
            ;
             abstract ensures {true}(let _ = (Fibonacci_functions__fibo_get_value__aux1.aux1.int__content <= 1836311903) in (
             ()))
             end ;
             abstract ensures {true}(let _ = (Fibonacci_functions__fibo_get_value__aux1.aux1.int__content > 0) in (
             ()))
             end ;
            () (* Loop statements appearing after the loop invariant of loop fibonacci_functions.adb:10 *)
            ;
            () (* Check for the exit condition and loop statements appearing before the loop invariant of loop fibonacci_functions.adb:10 *)
            ;
            (if ((Fibonacci_functions__fibo_get_value__L_1__j.j.int__content = temp___178)) then (
              raise Fibonacci_functions__fibo_get_value__L_1.L_1));
             Fibonacci_functions__fibo_get_value__L_1__j.j.int__content <- ( (Fibonacci_functions__fibo_get_value__L_1__j.j.int__content + 1) );
            ( "GP_Sloc:fibonacci_functions.adb:11:16" (#"fibonacci_functions.adb" 11 0 0# ()) );
            ( "GP_Sloc:fibonacci_functions.adb:11:37" (#"fibonacci_functions.adb" 11 0 0# ()) );
            ( "GP_Sloc:fibonacci_functions.adb:11:13" (#"fibonacci_functions.adb" 11 0 0# (if ((Fibonacci_functions__fibo_get_value__aux1.aux1.int__content <= (1836311903 - Fibonacci_functions__fibo_get_value__aux0.aux0.int__content))) then (
             ( ( "GP_Sloc:fibonacci_functions.adb:12:16" (#"fibonacci_functions.adb" 12 0 0# ()) );
             ( "GP_Sloc:fibonacci_functions.adb:12:24" (#"fibonacci_functions.adb" 12 0 0# ()) );
             ( "GP_Sloc:fibonacci_functions.adb:12:21" (#"fibonacci_functions.adb" 12 0 0# #"fibonacci_functions.adb" 12 0 0# Fibonacci_functions__fibo_get_value__aux2.aux2.int__content <- ( Fibonacci_functions__fibo_get_value__aux1.aux1.int__content )) );
             ( "GP_Sloc:fibonacci_functions.adb:13:16" (#"fibonacci_functions.adb" 13 0 0# ()) );
             ( "GP_Sloc:fibonacci_functions.adb:13:24" (#"fibonacci_functions.adb" 13 0 0# ()) );
             ( "GP_Sloc:fibonacci_functions.adb:13:31" (#"fibonacci_functions.adb" 13 0 0# ()) );
             ( "GP_Sloc:fibonacci_functions.adb:13:21" (#"fibonacci_functions.adb" 13 0 0# #"fibonacci_functions.adb" 13 0 0# Fibonacci_functions__fibo_get_value__aux1.aux1.int__content <- ( (#"fibonacci_functions.adb" 13 0 0# ( "model_vc" "keep_on_simp" "GP_Sloc:fibonacci_functions.adb:13:29" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Id:0" "comment:               aux1 := aux0 + aux1;
                            ^ fibonacci_functions.adb:13:29:VC_OVERFLOW_CHECK" "GP_Shape:if__L_1_while__if__aux1_assign__add" (Standard__integer.range_check_((Fibonacci_functions__fibo_get_value__aux0.aux0.int__content + Fibonacci_functions__fibo_get_value__aux1.aux1.int__content))) )) )) );
             ( "GP_Sloc:fibonacci_functions.adb:14:16" (#"fibonacci_functions.adb" 14 0 0# ()) );
             ( "GP_Sloc:fibonacci_functions.adb:14:24" (#"fibonacci_functions.adb" 14 0 0# ()) );
             ( "GP_Sloc:fibonacci_functions.adb:14:21" (#"fibonacci_functions.adb" 14 0 0# #"fibonacci_functions.adb" 14 0 0# Fibonacci_functions__fibo_get_value__aux0.aux0.int__content <- ( Fibonacci_functions__fibo_get_value__aux2.aux2.int__content )) ) )) else (
             ( "GP_Sloc:fibonacci_functions.adb:16:16" (#"fibonacci_functions.adb" 16 0 0# ( #"fibonacci_functions.adb" 16 0 0# fibonacci_functions__fibo_get_value__result.int__content <- ( 1836311903 );
             #"fibonacci_functions.adb" 16 0 0# raise Return__exc )) )))) ) )
           done )))
           )))
          )))
         )))
        )
      with
       Fibonacci_functions__fibo_get_value__L_1.L_1 -> ()
      end)) )))
    ))
    ) )) else (
    ()))) );
   ( "GP_Sloc:fibonacci_functions.adb:22:14" (#"fibonacci_functions.adb" 22 0 0# ()) );
   ( "GP_Sloc:fibonacci_functions.adb:22:7" (#"fibonacci_functions.adb" 22 0 0# ( #"fibonacci_functions.adb" 22 0 0# fibonacci_functions__fibo_get_value__result.int__content <- ( Fibonacci_functions__fibo_get_value__aux1.aux1.int__content );
   #"fibonacci_functions.adb" 22 0 0# raise Return__exc )) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   abstract ensures {true}(let _ = ( (fibonacci_functions__fibo_get_value__result.int__content <= 1836311903) && (fibonacci_functions__fibo_get_value__result.int__content > 0) ) in (
   ()))
   end ;
  fibonacci_functions__fibo_get_value__result.int__content )
end

(* Module for checking contracts and absence of run-time errors in subprogram "fibo_closest_value" defined at fibonacci_functions.ads:16, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Fibonacci_functions__fibo_closest_value__subprogram_def
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Int_Abs
 use        "_gnatprove_standard".Boolean
 use        Standard__integer
 use        Standard__natural___axiom
 use        Fibonacci_functions__fibo_get_value___axiom
 use        Fibonacci_functions__fibo_closest_value__value
 use        Fibonacci_functions__fibo_closest_value__aux
 use        Fibonacci_functions__fibo_closest_value__pastaux
 use        Fibonacci_functions__fibo_closest_value__L_2
 use        Fibonacci_functions__fibo_closest_value__L_2__T4b
 use        Fibonacci_functions__fibo_closest_value__L_2__j
 use        Standard__natural___axiom
 use        Standard__positive___axiom
 use        Standard__integer___axiom
 use        Fibonacci_functions__fibo_closest_value__aux___axiom
 use        Fibonacci_functions__fibo_closest_value__pastaux___axiom
 use        Fibonacci_functions__fibo_closest_value__L_2__j___axiom
 use        Fibonacci_functions__fibo_closest_value__L_2___axiom
 use        Fibonacci_functions__fibo_get_value___axiom
 use        Fibonacci_functions__fibo_closest_value__value___axiom
 use        Fibonacci_functions__fibo_closest_value__L_2__T4b___axiom

 val fibonacci_functions__fibo_closest_value__result "model_projected" "model_trace:2845@result" "name:fibo_closest_value"  : int__ref 
 
 let def #"fibonacci_functions.ads" 16 0 0#"W:diverges:N" "GP_Subp:fibonacci_functions.ads:16" 
   (__void_param : unit)
  requires { #"fibonacci_functions.ads" 16 0 0# true }
  ensures { #"fibonacci_functions.ads" 16 0 0# (#"fibonacci_functions.ads" 23 0 0# ( "model_vc_post" "keep_on_simp" "GP_Reason:VC_POSTCONDITION" "GP_Shape:pragargs__cmp" "GP_Sloc:fibonacci_functions.ads:23:10" "GP_Id:12" "comment:         fibo_closest_value'Result <= 1836311903
         ^ fibonacci_functions.ads:23:10:VC_POSTCONDITION" ( ( "GP_Pretty_Ada:3166" "GP_Sloc:fibonacci_functions.ads:23:10" (fibonacci_functions__fibo_closest_value__result.int__content <= 1836311903) ) /\ ( "GP_Pretty_Ada:2888" "GP_Sloc:fibonacci_functions.ads:24:45" (fibonacci_functions__fibo_closest_value__result.int__content >= 1) ) ) )) }
   =
  ( () (* Assume dynamic invariants of inputs of the subprogram fibonacci_functions.ads:16 *)
  ;
   assume {  (Standard__natural___axiom.dynamic_invariant Fibonacci_functions__fibo_closest_value__value.value True False True True) };
   assume {  true };
  () (* Declarations introduced by the compiler at the beginning of the subprogram fibonacci_functions.ads:16 *)
  ;
  () (* Check for RTE in the Pre of the subprogram fibonacci_functions.ads:16 *)
  ;
   abstract ensures {true}(let _ = ( (Fibonacci_functions__fibo_closest_value__value.value <= 1836311903) && (Fibonacci_functions__fibo_closest_value__value.value > 0) ) in (
   ()))
   end ;
  () (* Assume Pre of the subprogram fibonacci_functions.ads:16 *)
  ;
   assume {  ( (Fibonacci_functions__fibo_closest_value__value.value <= 1836311903) /\ (Fibonacci_functions__fibo_closest_value__value.value > 0) ) };
   try
   ( (#"fibonacci_functions.adb" 26 0 0# ());
   (#"fibonacci_functions.adb" 26 0 0# ( #"fibonacci_functions.adb" 26 0 0# Fibonacci_functions__fibo_closest_value__aux.aux.int__content <- ( (#"fibonacci_functions.adb" 26 0 0# ( "model_vc" "keep_on_simp" "GP_Sloc:fibonacci_functions.adb:26:24" "GP_Reason:VC_PRECONDITION" "GP_Id:4" "comment:      aux : Natural := fibo_get_value(1);
                       ^ fibonacci_functions.adb:26:24:VC_PRECONDITION" "GP_Shape:aux_decl__call_fibo_get_value" (Fibonacci_functions__fibo_get_value___axiom.fibo_get_value(1)) )) );
    assume {  (Standard__natural___axiom.dynamic_invariant Fibonacci_functions__fibo_closest_value__aux.aux.int__content True False True True) } ));
   (#"fibonacci_functions.adb" 27 0 0# ( #"fibonacci_functions.adb" 27 0 0# abstract ensures {true}(let _ = () in (
    ()))
    end ;
   #"fibonacci_functions.adb" 27 0 0# assume { #"fibonacci_functions.adb" 27 0 0# (Standard__natural___axiom.default_initial_assumption Fibonacci_functions__fibo_closest_value__pastaux.pastaux.int__content False) };
   #"fibonacci_functions.adb" 27 0 0# assume { #"fibonacci_functions.adb" 27 0 0# (Standard__natural___axiom.dynamic_invariant Fibonacci_functions__fibo_closest_value__pastaux.pastaux.int__content False False True True) } ));
   (#"fibonacci_functions.adb" 29 0 0# ());
   ( "GP_Sloc:fibonacci_functions.adb:29:24" (#"fibonacci_functions.adb" 29 0 0# (let temp___183 = 2 in (
   (let temp___184 = 46 in (
    ( #"fibonacci_functions.adb" 29 0 0# Fibonacci_functions__fibo_closest_value__L_2__j.j.int__content <- ( temp___183 );
    () (* Translation of an Ada loop from fibonacci_functions.adb:29 *)
    ;
    (if ((Boolean.andb((temp___183 <= Fibonacci_functions__fibo_closest_value__L_2__j.j.int__content)) ((Fibonacci_functions__fibo_closest_value__L_2__j.j.int__content <= temp___184)))) then (
     #"fibonacci_functions.adb" 29 0 0# try
      ( #"fibonacci_functions.adb" 29 0 0# abstract ensures {true}(let _ = Fibonacci_functions__fibo_closest_value__L_2__j.j.int__content in (
       ()))
       end ;
      (let temp___187 = #"fibonacci_functions.adb" 29 0 0# (any int
      ensures {#"fibonacci_functions.adb" 29 0 0# (result = Fibonacci_functions__fibo_closest_value__L_2__j.j.int__content)} 
      ) in (
       ( #"fibonacci_functions.adb" 29 0 0# abstract ensures {true}(let _ = Fibonacci_functions__fibo_closest_value__pastaux.pastaux.int__content in (
        ()))
        end ;
       (let temp___186 = #"fibonacci_functions.adb" 29 0 0# (any int
       ensures {#"fibonacci_functions.adb" 29 0 0# (result = Fibonacci_functions__fibo_closest_value__pastaux.pastaux.int__content)} 
       ) in (
        ( #"fibonacci_functions.adb" 29 0 0# abstract ensures {true}(let _ = Fibonacci_functions__fibo_closest_value__aux.aux.int__content in (
         ()))
         end ;
        (let temp___185 = #"fibonacci_functions.adb" 29 0 0# (any int
        ensures {#"fibonacci_functions.adb" 29 0 0# (result = Fibonacci_functions__fibo_closest_value__aux.aux.int__content)} 
        ) in (
         ( () (* First unroling of the loop statements appearing before the loop invariant of loop fibonacci_functions.adb:29 *)
         ;
         ( "GP_Sloc:fibonacci_functions.adb:30:10" (#"fibonacci_functions.adb" 30 0 0# ()) );
         ( "GP_Sloc:fibonacci_functions.adb:30:21" (#"fibonacci_functions.adb" 30 0 0# ()) );
         ( "GP_Sloc:fibonacci_functions.adb:30:18" (#"fibonacci_functions.adb" 30 0 0# #"fibonacci_functions.adb" 30 0 0# Fibonacci_functions__fibo_closest_value__pastaux.pastaux.int__content <- ( Fibonacci_functions__fibo_closest_value__aux.aux.int__content )) );
         ( "GP_Sloc:fibonacci_functions.adb:31:10" (#"fibonacci_functions.adb" 31 0 0# ()) );
         ( "GP_Sloc:fibonacci_functions.adb:31:17" (#"fibonacci_functions.adb" 31 0 0# ()) );
         ( "GP_Sloc:fibonacci_functions.adb:31:14" (#"fibonacci_functions.adb" 31 0 0# #"fibonacci_functions.adb" 31 0 0# Fibonacci_functions__fibo_closest_value__aux.aux.int__content <- ( (#"fibonacci_functions.adb" 31 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_PRECONDITION" "GP_Sloc:fibonacci_functions.adb:31:17" "GP_Id:5" "comment:	 aux := fibo_get_value(J);
                ^ fibonacci_functions.adb:31:17:VC_PRECONDITION" "GP_Shape:L_2_while__aux_assign__call_fibo_get_value" (Fibonacci_functions__fibo_get_value___axiom.fibo_get_value(Fibonacci_functions__fibo_closest_value__L_2__j.j.int__content)) )) )) );
         ( "GP_Sloc:fibonacci_functions.adb:32:13" (#"fibonacci_functions.adb" 32 0 0# ()) );
         ( "GP_Sloc:fibonacci_functions.adb:32:10" (#"fibonacci_functions.adb" 32 0 0# (if ((Fibonacci_functions__fibo_closest_value__aux.aux.int__content <> Fibonacci_functions__fibo_closest_value__value.value)) then (
          ( ( "GP_Sloc:fibonacci_functions.adb:33:16" (#"fibonacci_functions.adb" 33 0 0# ()) );
          ( "GP_Sloc:fibonacci_functions.adb:33:13" (#"fibonacci_functions.adb" 33 0 0# (if ((Fibonacci_functions__fibo_closest_value__aux.aux.int__content > Fibonacci_functions__fibo_closest_value__value.value)) then (
           ( ( "GP_Sloc:fibonacci_functions.adb:34:23" (#"fibonacci_functions.adb" 34 0 0# ()) );
           ( "GP_Sloc:fibonacci_functions.adb:34:46" (#"fibonacci_functions.adb" 34 0 0# ()) );
           ( "GP_Sloc:fibonacci_functions.adb:34:16" (#"fibonacci_functions.adb" 34 0 0# (if (((#"fibonacci_functions.adb" 34 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Sloc:fibonacci_functions.adb:34:19" "GP_Id:7" "comment:	       if abs(pastAux - value) > abs(aux - value) then
                  ^ fibonacci_functions.adb:34:19:VC_OVERFLOW_CHECK" "GP_Shape:L_2_while__if__if__if__cmp__abs" (Standard__integer.range_check_((Int_Abs.abs((#"fibonacci_functions.adb" 34 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Sloc:fibonacci_functions.adb:34:31" "GP_Id:6" "comment:	       if abs(pastAux - value) > abs(aux - value) then
                              ^ fibonacci_functions.adb:34:31:VC_OVERFLOW_CHECK" "GP_Shape:L_2_while__if__if__if__cmp__abs__sub" (Standard__integer.range_check_((Fibonacci_functions__fibo_closest_value__pastaux.pastaux.int__content - Fibonacci_functions__fibo_closest_value__value.value))) )))))) )) > (#"fibonacci_functions.adb" 34 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Shape:L_2_while__if__if__if__cmp__abs" "GP_Sloc:fibonacci_functions.adb:34:42" "GP_Id:9" "comment:	       if abs(pastAux - value) > abs(aux - value) then
                                         ^ fibonacci_functions.adb:34:42:VC_OVERFLOW_CHECK" (Standard__integer.range_check_((Int_Abs.abs((#"fibonacci_functions.adb" 34 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Shape:L_2_while__if__if__if__cmp__abs__sub" "GP_Sloc:fibonacci_functions.adb:34:50" "GP_Id:8" "comment:	       if abs(pastAux - value) > abs(aux - value) then
                                                 ^ fibonacci_functions.adb:34:50:VC_OVERFLOW_CHECK" (Standard__integer.range_check_((Fibonacci_functions__fibo_closest_value__aux.aux.int__content - Fibonacci_functions__fibo_closest_value__value.value))) )))))) )))) then (
            ( ( "GP_Sloc:fibonacci_functions.adb:35:26" (#"fibonacci_functions.adb" 35 0 0# ()) );
            ( "GP_Sloc:fibonacci_functions.adb:35:19" (#"fibonacci_functions.adb" 35 0 0# ( #"fibonacci_functions.adb" 35 0 0# fibonacci_functions__fibo_closest_value__result.int__content <- ( Fibonacci_functions__fibo_closest_value__aux.aux.int__content );
            #"fibonacci_functions.adb" 35 0 0# raise Return__exc )) ) )) else (
            ( ( "GP_Sloc:fibonacci_functions.adb:37:26" (#"fibonacci_functions.adb" 37 0 0# ()) );
            ( "GP_Sloc:fibonacci_functions.adb:37:19" (#"fibonacci_functions.adb" 37 0 0# ( #"fibonacci_functions.adb" 37 0 0# fibonacci_functions__fibo_closest_value__result.int__content <- ( Fibonacci_functions__fibo_closest_value__pastaux.pastaux.int__content );
            #"fibonacci_functions.adb" 37 0 0# raise Return__exc )) ) )))) ) )) else (
           ()))) ) )) else (
          ( ( "GP_Sloc:fibonacci_functions.adb:41:20" (#"fibonacci_functions.adb" 41 0 0# ()) );
          ( "GP_Sloc:fibonacci_functions.adb:41:13" (#"fibonacci_functions.adb" 41 0 0# ( #"fibonacci_functions.adb" 41 0 0# fibonacci_functions__fibo_closest_value__result.int__content <- ( Fibonacci_functions__fibo_closest_value__aux.aux.int__content );
          #"fibonacci_functions.adb" 41 0 0# raise Return__exc )) ) )))) );
         () (* While loop translating the Ada loop from fibonacci_functions.adb:29 *)
         ;
          while True do
          invariant { 
           (#"fibonacci_functions.adb" 44 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_LOOP_INVARIANT" "GP_Sloc:fibonacci_functions.adb:44:32" "GP_Id:10" "comment:         pragma Loop_Invariant(value /= aux);
                               ^ fibonacci_functions.adb:44:32:VC_LOOP_INVARIANT" "GP_Shape:L_2_while__pragargs__cmp" ( "GP_Pretty_Ada:2520" "GP_Sloc:fibonacci_functions.adb:44:32" (Fibonacci_functions__fibo_closest_value__value.value <> Fibonacci_functions__fibo_closest_value__aux.aux.int__content) ) ))
           }
          invariant { 
           (#"fibonacci_functions.adb" 45 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_LOOP_INVARIANT" "GP_Shape:L_2_while__pragargs__cmp" "GP_Sloc:fibonacci_functions.adb:45:32" "GP_Id:11" "comment:         pragma Loop_Invariant(aux > 0);
                               ^ fibonacci_functions.adb:45:32:VC_LOOP_INVARIANT" ( "GP_Pretty_Ada:2527" "GP_Sloc:fibonacci_functions.adb:45:32" (Fibonacci_functions__fibo_closest_value__aux.aux.int__content > 0) ) ))
           }
          ( () (* Assume implicit invariants from the loop fibonacci_functions.adb:29 *)
          ;
           assume {  (Boolean.andb(( ( ( ( ( ( true /\ (Standard__natural___axiom.dynamic_invariant Fibonacci_functions__fibo_closest_value__aux.aux.int__content False True True True) ) /\ true ) /\ (Standard__natural___axiom.dynamic_invariant Fibonacci_functions__fibo_closest_value__pastaux.pastaux.int__content False True True True) ) /\ true ) /\ (if ((Fibonacci_functions__fibo_closest_value__L_2__T4b.first <= Fibonacci_functions__fibo_closest_value__L_2__T4b.last)) then (
           (Fibonacci_functions__fibo_closest_value__L_2__T4b.dynamic_property Fibonacci_functions__fibo_closest_value__L_2__T4b.first Fibonacci_functions__fibo_closest_value__L_2__T4b.last Fibonacci_functions__fibo_closest_value__L_2__j.j.int__content)) else true) ) /\ true )) (( (2 <= Fibonacci_functions__fibo_closest_value__L_2__j.j.int__content) /\ (Fibonacci_functions__fibo_closest_value__L_2__j.j.int__content <= 46) ))) };
          () (* Check for absence of RTE in the invariant of loop fibonacci_functions.adb:29 *)
          ;
           abstract ensures {true}(let _ = (Fibonacci_functions__fibo_closest_value__value.value <> Fibonacci_functions__fibo_closest_value__aux.aux.int__content) in (
           ()))
           end ;
           abstract ensures {true}(let _ = (Fibonacci_functions__fibo_closest_value__aux.aux.int__content > 0) in (
           ()))
           end ;
          () (* Loop statements appearing after the loop invariant of loop fibonacci_functions.adb:29 *)
          ;
          () (* Check for the exit condition and loop statements appearing before the loop invariant of loop fibonacci_functions.adb:29 *)
          ;
          (if ((Fibonacci_functions__fibo_closest_value__L_2__j.j.int__content = temp___184)) then (
            raise Fibonacci_functions__fibo_closest_value__L_2.L_2));
           Fibonacci_functions__fibo_closest_value__L_2__j.j.int__content <- ( (Fibonacci_functions__fibo_closest_value__L_2__j.j.int__content + 1) );
          ( "GP_Sloc:fibonacci_functions.adb:30:10" (#"fibonacci_functions.adb" 30 0 0# ()) );
          ( "GP_Sloc:fibonacci_functions.adb:30:21" (#"fibonacci_functions.adb" 30 0 0# ()) );
          ( "GP_Sloc:fibonacci_functions.adb:30:18" (#"fibonacci_functions.adb" 30 0 0# #"fibonacci_functions.adb" 30 0 0# Fibonacci_functions__fibo_closest_value__pastaux.pastaux.int__content <- ( Fibonacci_functions__fibo_closest_value__aux.aux.int__content )) );
          ( "GP_Sloc:fibonacci_functions.adb:31:10" (#"fibonacci_functions.adb" 31 0 0# ()) );
          ( "GP_Sloc:fibonacci_functions.adb:31:17" (#"fibonacci_functions.adb" 31 0 0# ()) );
          ( "GP_Sloc:fibonacci_functions.adb:31:14" (#"fibonacci_functions.adb" 31 0 0# #"fibonacci_functions.adb" 31 0 0# Fibonacci_functions__fibo_closest_value__aux.aux.int__content <- ( (#"fibonacci_functions.adb" 31 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_PRECONDITION" "GP_Sloc:fibonacci_functions.adb:31:17" "GP_Id:5" "comment:	 aux := fibo_get_value(J);
                ^ fibonacci_functions.adb:31:17:VC_PRECONDITION" "GP_Shape:L_2_while__aux_assign__call_fibo_get_value" (Fibonacci_functions__fibo_get_value___axiom.fibo_get_value(Fibonacci_functions__fibo_closest_value__L_2__j.j.int__content)) )) )) );
          ( "GP_Sloc:fibonacci_functions.adb:32:13" (#"fibonacci_functions.adb" 32 0 0# ()) );
          ( "GP_Sloc:fibonacci_functions.adb:32:10" (#"fibonacci_functions.adb" 32 0 0# (if ((Fibonacci_functions__fibo_closest_value__aux.aux.int__content <> Fibonacci_functions__fibo_closest_value__value.value)) then (
           ( ( "GP_Sloc:fibonacci_functions.adb:33:16" (#"fibonacci_functions.adb" 33 0 0# ()) );
           ( "GP_Sloc:fibonacci_functions.adb:33:13" (#"fibonacci_functions.adb" 33 0 0# (if ((Fibonacci_functions__fibo_closest_value__aux.aux.int__content > Fibonacci_functions__fibo_closest_value__value.value)) then (
            ( ( "GP_Sloc:fibonacci_functions.adb:34:23" (#"fibonacci_functions.adb" 34 0 0# ()) );
            ( "GP_Sloc:fibonacci_functions.adb:34:46" (#"fibonacci_functions.adb" 34 0 0# ()) );
            ( "GP_Sloc:fibonacci_functions.adb:34:16" (#"fibonacci_functions.adb" 34 0 0# (if (((#"fibonacci_functions.adb" 34 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Sloc:fibonacci_functions.adb:34:19" "GP_Id:7" "comment:	       if abs(pastAux - value) > abs(aux - value) then
                  ^ fibonacci_functions.adb:34:19:VC_OVERFLOW_CHECK" "GP_Shape:L_2_while__if__if__if__cmp__abs" (Standard__integer.range_check_((Int_Abs.abs((#"fibonacci_functions.adb" 34 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Sloc:fibonacci_functions.adb:34:31" "GP_Id:6" "comment:	       if abs(pastAux - value) > abs(aux - value) then
                              ^ fibonacci_functions.adb:34:31:VC_OVERFLOW_CHECK" "GP_Shape:L_2_while__if__if__if__cmp__abs__sub" (Standard__integer.range_check_((Fibonacci_functions__fibo_closest_value__pastaux.pastaux.int__content - Fibonacci_functions__fibo_closest_value__value.value))) )))))) )) > (#"fibonacci_functions.adb" 34 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Shape:L_2_while__if__if__if__cmp__abs" "GP_Sloc:fibonacci_functions.adb:34:42" "GP_Id:9" "comment:	       if abs(pastAux - value) > abs(aux - value) then
                                         ^ fibonacci_functions.adb:34:42:VC_OVERFLOW_CHECK" (Standard__integer.range_check_((Int_Abs.abs((#"fibonacci_functions.adb" 34 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Shape:L_2_while__if__if__if__cmp__abs__sub" "GP_Sloc:fibonacci_functions.adb:34:50" "GP_Id:8" "comment:	       if abs(pastAux - value) > abs(aux - value) then
                                                 ^ fibonacci_functions.adb:34:50:VC_OVERFLOW_CHECK" (Standard__integer.range_check_((Fibonacci_functions__fibo_closest_value__aux.aux.int__content - Fibonacci_functions__fibo_closest_value__value.value))) )))))) )))) then (
             ( ( "GP_Sloc:fibonacci_functions.adb:35:26" (#"fibonacci_functions.adb" 35 0 0# ()) );
             ( "GP_Sloc:fibonacci_functions.adb:35:19" (#"fibonacci_functions.adb" 35 0 0# ( #"fibonacci_functions.adb" 35 0 0# fibonacci_functions__fibo_closest_value__result.int__content <- ( Fibonacci_functions__fibo_closest_value__aux.aux.int__content );
             #"fibonacci_functions.adb" 35 0 0# raise Return__exc )) ) )) else (
             ( ( "GP_Sloc:fibonacci_functions.adb:37:26" (#"fibonacci_functions.adb" 37 0 0# ()) );
             ( "GP_Sloc:fibonacci_functions.adb:37:19" (#"fibonacci_functions.adb" 37 0 0# ( #"fibonacci_functions.adb" 37 0 0# fibonacci_functions__fibo_closest_value__result.int__content <- ( Fibonacci_functions__fibo_closest_value__pastaux.pastaux.int__content );
             #"fibonacci_functions.adb" 37 0 0# raise Return__exc )) ) )))) ) )) else (
            ()))) ) )) else (
           ( ( "GP_Sloc:fibonacci_functions.adb:41:20" (#"fibonacci_functions.adb" 41 0 0# ()) );
           ( "GP_Sloc:fibonacci_functions.adb:41:13" (#"fibonacci_functions.adb" 41 0 0# ( #"fibonacci_functions.adb" 41 0 0# fibonacci_functions__fibo_closest_value__result.int__content <- ( Fibonacci_functions__fibo_closest_value__aux.aux.int__content );
           #"fibonacci_functions.adb" 41 0 0# raise Return__exc )) ) )))) ) )
         done )))
         )))
        )))
       )
     with
      Fibonacci_functions__fibo_closest_value__L_2.L_2 -> ()
     end)) )))
   ))
   ) );
   ( "GP_Sloc:fibonacci_functions.adb:47:7" (#"fibonacci_functions.adb" 47 0 0# ( #"fibonacci_functions.adb" 47 0 0# fibonacci_functions__fibo_closest_value__result.int__content <- ( 1836311903 );
   #"fibonacci_functions.adb" 47 0 0# raise Return__exc )) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   abstract ensures {true}(let _ = ( (fibonacci_functions__fibo_closest_value__result.int__content <= 1836311903) && (fibonacci_functions__fibo_closest_value__result.int__content >= 1) ) in (
   ()))
   end ;
  fibonacci_functions__fibo_closest_value__result.int__content )
end

(* Module for defining the value of the aggregate at fibonacci_functions.adb:51, created in Gnat2Why.Expr.Transform_Aggregate.Generate_Logic_Function *)
module Fibonacci_functions__fibo_values_vector__result_array__aggregate_def___axiom
 use import "_gnatprove_standard".Main
 use        Standard__integer
 use        Standard__integer___axiom
 use        Standard__positive
 use        Fibonacci_functions__arrayofints
 use        Array__Int__Standard__integer
 use        Fibonacci_functions__fibo_values_vector__T10b
 use        Fibonacci_functions__fibo_values_vector__result_array__aggregate_def
 use        Array__Int__Standard__integer

 axiom def_axiom :
  (forall temp___189   temp___190   temp___191   : int.
   (let temp___188 = (Fibonacci_functions__fibo_values_vector__result_array__aggregate_def.fibonacci_functions__fibo_values_vector__result_array__aggregate_def temp___189 temp___190 temp___191) in (
    (if ((Standard__integer___axiom.dynamic_invariant temp___189 True True True True)) then (
     ( (if ((Fibonacci_functions__arrayofints.dynamic_property Standard__positive.first Standard__positive.last temp___190 temp___191)) then (
      ( ((Fibonacci_functions__fibo_values_vector__T10b.first temp___188) = temp___190) /\ ((Fibonacci_functions__fibo_values_vector__T10b.last temp___188) = temp___191) )) else true) /\ (forall temp___192   : int.
      ((Array__Int__Standard__integer.get (Fibonacci_functions__fibo_values_vector__T10b.to_array temp___188) temp___192) = ( 0 : Standard__integer.integer ))) )) else true)))
  )

end

(* Module for checking contracts and absence of run-time errors in subprogram "fibo_values_vector" defined at fibonacci_functions.ads:26, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Fibonacci_functions__fibo_values_vector__subprogram_def
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        Standard__integer
 use        Standard__integer__rep
 use        Standard__positive
 use        Standard__positive___axiom
 use        Standard__integer__rep
 use        Fibonacci_functions__fibo_get_value
 use        Fibonacci_functions__fibo_get_value___axiom
 use        Fibonacci_functions__arrayofints
 use        Array__Int__Standard__integer
 use        Fibonacci_functions__fibo_values_vector__value
 use        Fibonacci_functions__fibo_values_vector__Tresult_arrayS
 use        Fibonacci_functions__fibo_values_vector__T10b
 use        Array__Int__Standard__integer
 use        Fibonacci_functions__fibo_values_vector__result_array
 use        Fibonacci_functions__fibo_values_vector__L_3
 use        Fibonacci_functions__fibo_values_vector__L_3__T11b
 use        Fibonacci_functions__fibo_values_vector__L_3__j
 use        Fibonacci_functions__fibo_values_vector__result_array__aggregate_def
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Standard__integer___axiom
 use        Standard__natural___axiom
 use        Standard__positive___axiom
 use        Standard__integer___axiom
 use        Fibonacci_functions__fibo_values_vector__result_array___axiom
 use        Fibonacci_functions__fibo_values_vector__result_array__aggregate_def___axiom
 use        Fibonacci_functions__fibo_values_vector__L_3__j___axiom
 use        Fibonacci_functions__fibo_values_vector__L_3___axiom
 use        Fibonacci_functions__arrayofints___axiom
 use        Fibonacci_functions__fibo_get_value___axiom
 use        Fibonacci_functions__fibo_values_vector__value___axiom
 use        Fibonacci_functions__fibo_values_vector__Tresult_arrayS___axiom
 use        Fibonacci_functions__fibo_values_vector__TTresult_arraySP1___axiom
 use        Fibonacci_functions__fibo_values_vector__T9b___axiom
 use        Fibonacci_functions__fibo_values_vector__T10b___axiom
 use        Fibonacci_functions__fibo_values_vector__L_3__T11b___axiom

 val fibonacci_functions__fibo_values_vector__result "model_projected" "model_trace:2889@result" "name:fibo_values_vector"  : Fibonacci_functions__arrayofints.arrayofints__ref 
 
 let def #"fibonacci_functions.ads" 26 0 0#"W:diverges:N" "GP_Subp:fibonacci_functions.ads:26" 
   (__void_param : unit)
  requires { #"fibonacci_functions.ads" 26 0 0# true }
  ensures { #"fibonacci_functions.ads" 26 0 0# (#"fibonacci_functions.ads" 32 0 0# ( "model_vc_post" "keep_on_simp" "GP_Reason:VC_POSTCONDITION" "GP_Sloc:fibonacci_functions.ads:32:10" "GP_Id:22" "comment:         (for all J in fibo_values_vector'Result'Range =>
         ^ fibonacci_functions.ads:32:10:VC_POSTCONDITION" "GP_Shape:pragargs__forall" (forall j #"fibonacci_functions.ads" 32 0 0#  "model" "name:J" "model_trace:2918"  : int.
   ( ( ((Fibonacci_functions__arrayofints.first fibonacci_functions__fibo_values_vector__result.Fibonacci_functions__arrayofints.arrayofints__content) <= j) /\ (j <= (Fibonacci_functions__arrayofints.last fibonacci_functions__fibo_values_vector__result.Fibonacci_functions__arrayofints.arrayofints__content)) ) -> ( "GP_Pretty_Ada:2936" "GP_Sloc:fibonacci_functions.ads:33:13" ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (Fibonacci_functions__arrayofints.to_array fibonacci_functions__fibo_values_vector__result.Fibonacci_functions__arrayofints.arrayofints__content) j)) = (epsilon temp___result_206 : int.
    ( (temp___result_206 = (Fibonacci_functions__fibo_get_value.fibo_get_value j)) /\ (Fibonacci_functions__fibo_get_value.fibo_get_value__function_guard temp___result_206 j) ))) ) )) )) }
   =
  ( () (* Assume dynamic invariants of inputs of the subprogram fibonacci_functions.ads:26 *)
  ;
   assume {  (Standard__positive___axiom.dynamic_invariant Fibonacci_functions__fibo_values_vector__value.value True False True True) };
   assume {  true };
  () (* Declarations introduced by the compiler at the beginning of the subprogram fibonacci_functions.ads:26 *)
  ;
  () (* Check for RTE in the Pre of the subprogram fibonacci_functions.ads:26 *)
  ;
   abstract ensures {true}(let _ = (Fibonacci_functions__fibo_values_vector__value.value <= 46) in (
   ()))
   end ;
  () (* Assume Pre of the subprogram fibonacci_functions.ads:26 *)
  ;
   assume {  (Fibonacci_functions__fibo_values_vector__value.value <= 46) };
   try
   ( (#"fibonacci_functions.adb" 51 0 0# ( #"fibonacci_functions.adb" 51 0 0# abstract ensures {true}(let _ = Fibonacci_functions__fibo_values_vector__value.value in (
    ()))
    end ;
   (#"fibonacci_functions.adb" 51 0 0# ( "[no name]" "model_vc" "keep_on_simp" "GP_Sloc:fibonacci_functions.adb:51:7" "GP_Reason:VC_RANGE_CHECK" "GP_Id:13" "comment:      result_array : arrayOfInts(1..value) := (others => 0);
      ^ fibonacci_functions.adb:51:7:VC_RANGE_CHECK" #"fibonacci_functions.adb" 51 0 0# (any unit
   requires {#"fibonacci_functions.adb" 51 0 0# ( (1 <= Fibonacci_functions__fibo_values_vector__value.value) -> ( (1 >= Standard__positive.first) /\ (Fibonacci_functions__fibo_values_vector__value.value <= Standard__positive.last) ) )} 
   ensures {#"fibonacci_functions.adb" 51 0 0# true} 
   ) )) ));
   (#"fibonacci_functions.adb" 51 0 0# ( (let fibonacci_functions__fibo_values_vector__result_array__assume = (let temp___194 = (let temp___193 = (Fibonacci_functions__fibo_values_vector__result_array__aggregate_def.fibonacci_functions__fibo_values_vector__result_array__aggregate_def(0) (1) (Fibonacci_functions__fibo_values_vector__value.value)) in (
    ( #"fibonacci_functions.adb" 51 0 0# assume { #"fibonacci_functions.adb" 51 0 0# ((Fibonacci_functions__fibo_values_vector__T10b.first temp___193) = 1) };
    #"fibonacci_functions.adb" 51 0 0# assume { #"fibonacci_functions.adb" 51 0 0# ((Fibonacci_functions__fibo_values_vector__T10b.last temp___193) = Fibonacci_functions__fibo_values_vector__value.value) };
    temp___193 )))
    in (
    ( #"fibonacci_functions.adb" 51 0 0# assert { #"fibonacci_functions.adb" 51 0 0# (#"fibonacci_functions.adb" 51 0 0# ( "model_vc" "keep_on_simp" "GP_Sloc:fibonacci_functions.adb:51:47" "GP_Reason:VC_LENGTH_CHECK" "GP_Id:14" "comment:      result_array : arrayOfInts(1..value) := (others => 0);
                                              ^ fibonacci_functions.adb:51:47:VC_LENGTH_CHECK" "GP_Shape:result_array_decl__aggr" ((if (((Fibonacci_functions__fibo_values_vector__T10b.first(temp___194)) <= (Fibonacci_functions__fibo_values_vector__T10b.last(temp___194)))) then (
     (((Fibonacci_functions__fibo_values_vector__T10b.last(temp___194)) - (Fibonacci_functions__fibo_values_vector__T10b.first(temp___194))) + 1)) else (
     0)) = (if ((1 <= Fibonacci_functions__fibo_values_vector__value.value)) then (
     ((Fibonacci_functions__fibo_values_vector__value.value - 1) + 1)) else (
     0))) )) };
    (Fibonacci_functions__fibo_values_vector__Tresult_arrayS.of_array((Fibonacci_functions__fibo_values_vector__T10b.to_array(temp___194))) ((Fibonacci_functions__fibo_values_vector__T10b.first(temp___194))) ((Fibonacci_functions__fibo_values_vector__T10b.last(temp___194)))) )))
    in (
    (  Fibonacci_functions__fibo_values_vector__result_array.result_array.Array__Int__Standard__integer.map__content <- ( (Fibonacci_functions__fibo_values_vector__Tresult_arrayS.to_array(fibonacci_functions__fibo_values_vector__result_array__assume)) );
     assume {  ((Standard__integer__rep.to_rep(Fibonacci_functions__fibo_values_vector__result_array.result_array__first)) = (Fibonacci_functions__fibo_values_vector__Tresult_arrayS.first(fibonacci_functions__fibo_values_vector__result_array__assume))) };
     assume {  ((Standard__integer__rep.to_rep(Fibonacci_functions__fibo_values_vector__result_array.result_array__last)) = (Fibonacci_functions__fibo_values_vector__Tresult_arrayS.last(fibonacci_functions__fibo_values_vector__result_array__assume))) } )))
   ;
    assume {  (if (False) then (
    true) else (
    ( (Fibonacci_functions__fibo_values_vector__Tresult_arrayS.dynamic_property 1 Fibonacci_functions__fibo_values_vector__value.value (Standard__integer__rep.to_rep Fibonacci_functions__fibo_values_vector__result_array.result_array__first) (Standard__integer__rep.to_rep Fibonacci_functions__fibo_values_vector__result_array.result_array__last)) /\ ( ((Standard__integer__rep.to_rep Fibonacci_functions__fibo_values_vector__result_array.result_array__first) = 1) /\ ((Standard__integer__rep.to_rep Fibonacci_functions__fibo_values_vector__result_array.result_array__last) = Fibonacci_functions__fibo_values_vector__value.value) ) ))) } ));
   (#"fibonacci_functions.adb" 53 0 0# ());
   ( "GP_Sloc:fibonacci_functions.adb:53:16" (#"fibonacci_functions.adb" 53 0 0# ()) );
   ( "GP_Sloc:fibonacci_functions.adb:53:35" (#"fibonacci_functions.adb" 53 0 0# (let temp___196 = 1 in (
   (let temp___197 = (Standard__integer__rep.to_rep(( #"fibonacci_functions.adb" 53 0 0# abstract ensures {true}(let _ = Fibonacci_functions__fibo_values_vector__result_array.result_array.Array__Int__Standard__integer.map__content in (
    ()))
    end ;
   Fibonacci_functions__fibo_values_vector__result_array.result_array__last ))) in (
    ( #"fibonacci_functions.adb" 53 0 0# Fibonacci_functions__fibo_values_vector__L_3__j.j.int__content <- ( temp___196 );
    () (* Translation of an Ada loop from fibonacci_functions.adb:53 *)
    ;
    (if ((Boolean.andb((temp___196 <= Fibonacci_functions__fibo_values_vector__L_3__j.j.int__content)) ((Fibonacci_functions__fibo_values_vector__L_3__j.j.int__content <= temp___197)))) then (
     #"fibonacci_functions.adb" 53 0 0# try
      ( #"fibonacci_functions.adb" 53 0 0# abstract ensures {true}(let _ = Fibonacci_functions__fibo_values_vector__L_3__j.j.int__content in (
       ()))
       end ;
      (let temp___201 = #"fibonacci_functions.adb" 53 0 0# (any int
      ensures {#"fibonacci_functions.adb" 53 0 0# (result = Fibonacci_functions__fibo_values_vector__L_3__j.j.int__content)} 
      ) in (
       ( #"fibonacci_functions.adb" 53 0 0# abstract ensures {true}(let _ = Fibonacci_functions__fibo_values_vector__result_array.result_array.Array__Int__Standard__integer.map__content in (
        ()))
        end ;
       (let temp___199 = #"fibonacci_functions.adb" 53 0 0# (any Array__Int__Standard__integer.map
       ensures {#"fibonacci_functions.adb" 53 0 0# (result = Fibonacci_functions__fibo_values_vector__result_array.result_array.Array__Int__Standard__integer.map__content)} 
       ) in (
        ( () (* First unroling of the loop statements appearing before the loop invariant of loop fibonacci_functions.adb:53 *)
        ;
        ( "GP_Sloc:fibonacci_functions.adb:54:10" (#"fibonacci_functions.adb" 54 0 0# ()) );
        ( "GP_Sloc:fibonacci_functions.adb:54:29" (#"fibonacci_functions.adb" 54 0 0# ()) );
        ( "GP_Sloc:fibonacci_functions.adb:54:26" (#"fibonacci_functions.adb" 54 0 0# #"fibonacci_functions.adb" 54 0 0# Fibonacci_functions__fibo_values_vector__result_array.result_array.Array__Int__Standard__integer.map__content <- ( (Array__Int__Standard__integer.set(Fibonacci_functions__fibo_values_vector__result_array.result_array.Array__Int__Standard__integer.map__content) (Fibonacci_functions__fibo_values_vector__L_3__j.j.int__content) ((Standard__integer__rep.of_rep((#"fibonacci_functions.adb" 54 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_PRECONDITION" "GP_Sloc:fibonacci_functions.adb:54:29" "GP_Id:15" "comment:         result_array(j) := fibo_get_value(j);
                            ^ fibonacci_functions.adb:54:29:VC_PRECONDITION" "GP_Shape:L_3_while__result_array_assign__call_fibo_get_value" (Fibonacci_functions__fibo_get_value___axiom.fibo_get_value(Fibonacci_functions__fibo_values_vector__L_3__j.j.int__content)) )))))) )) );
        () (* While loop translating the Ada loop from fibonacci_functions.adb:53 *)
        ;
         while True do
         invariant { 
          (#"fibonacci_functions.adb" 55 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_LOOP_INVARIANT" "GP_Sloc:fibonacci_functions.adb:55:32" "GP_Id:18" "comment:	 pragma Loop_Invariant(for all k in 1..j => 
                               ^ fibonacci_functions.adb:55:32:VC_LOOP_INVARIANT" "GP_Shape:L_3_while__pragargs__forall" (forall k #"fibonacci_functions.adb" 55 0 0#  "model" "model_trace:2600" "name:k"  : int.
           ( ( (1 <= k) /\ (k <= Fibonacci_functions__fibo_values_vector__L_3__j.j.int__content) ) -> ( "GP_Pretty_Ada:2615" "GP_Sloc:fibonacci_functions.adb:56:35" ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get Fibonacci_functions__fibo_values_vector__result_array.result_array.Array__Int__Standard__integer.map__content k)) = (epsilon temp___result_203 : int.
            ( (temp___result_203 = (Fibonacci_functions__fibo_get_value.fibo_get_value k)) /\ (Fibonacci_functions__fibo_get_value.fibo_get_value__function_guard temp___result_203 k) ))) ) )) ))
          }
         ( () (* Assume implicit invariants from the loop fibonacci_functions.adb:53 *)
         ;
          assume {  (Boolean.andb(( ( ( ( true /\ (if (True) then (
          true) else (
          ( (Fibonacci_functions__fibo_values_vector__Tresult_arrayS.dynamic_property 1 Fibonacci_functions__fibo_values_vector__value.value (Standard__integer__rep.to_rep Fibonacci_functions__fibo_values_vector__result_array.result_array__first) (Standard__integer__rep.to_rep Fibonacci_functions__fibo_values_vector__result_array.result_array__last)) /\ ( ((Standard__integer__rep.to_rep Fibonacci_functions__fibo_values_vector__result_array.result_array__first) = 1) /\ ((Standard__integer__rep.to_rep Fibonacci_functions__fibo_values_vector__result_array.result_array__last) = Fibonacci_functions__fibo_values_vector__value.value) ) ))) ) /\ (forall temp___200   : int.
          (if (( ((Standard__integer__rep.to_rep Fibonacci_functions__fibo_values_vector__result_array.result_array__first) <= temp___200) /\ (temp___200 <= (Standard__integer__rep.to_rep Fibonacci_functions__fibo_values_vector__result_array.result_array__last)) )) then (
           (if (( (temp___197 < temp___200) \/ ( (temp___200 < temp___196) \/ (Fibonacci_functions__fibo_values_vector__L_3__j.j.int__content < temp___200) ) )) then (
            ((Array__Int__Standard__integer.get Fibonacci_functions__fibo_values_vector__result_array.result_array.Array__Int__Standard__integer.map__content temp___200) = (Array__Int__Standard__integer.get temp___199 temp___200))) else (
            true))) else true)) ) /\ (if ((1 <= (Standard__integer__rep.to_rep Fibonacci_functions__fibo_values_vector__result_array.result_array__last))) then (
          (Fibonacci_functions__fibo_values_vector__L_3__T11b.dynamic_property 1 (Standard__integer__rep.to_rep Fibonacci_functions__fibo_values_vector__result_array.result_array__last) Fibonacci_functions__fibo_values_vector__L_3__j.j.int__content)) else true) ) /\ true )) (( (1 <= Fibonacci_functions__fibo_values_vector__L_3__j.j.int__content) /\ (Fibonacci_functions__fibo_values_vector__L_3__j.j.int__content <= (Standard__integer__rep.to_rep Fibonacci_functions__fibo_values_vector__result_array.result_array__last)) ))) };
         () (* Check for absence of RTE in the invariant of loop fibonacci_functions.adb:53 *)
         ;
          abstract ensures {true}(let _ = ( (let k =  (any int
         ) in (
          (if ((Boolean.andb((1 <= k)) ((k <= Fibonacci_functions__fibo_values_vector__L_3__j.j.int__content)))) then (
            abstract ensures {true}(let _ = ((Standard__integer__rep.to_rep((Array__Int__Standard__integer.get(Fibonacci_functions__fibo_values_vector__result_array.result_array.Array__Int__Standard__integer.map__content) ((  assert {  (#"fibonacci_functions.adb" 56 0 0# ( "model_vc" "keep_on_simp" "GP_Sloc:fibonacci_functions.adb:56:48" "GP_Reason:VC_INDEX_CHECK" "GP_Id:16" "comment:			          result_array(k) = fibo_get_value(k));
                                               ^ fibonacci_functions.adb:56:48:VC_INDEX_CHECK" "GP_Shape:L_3_while__pragargs__forall__cmp__ixdcomp" ( ((Standard__integer__rep.to_rep Fibonacci_functions__fibo_values_vector__result_array.result_array__first) <= k) /\ (k <= (Standard__integer__rep.to_rep Fibonacci_functions__fibo_values_vector__result_array.result_array__last)) ) )) };
           k ))))) = (#"fibonacci_functions.adb" 56 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_PRECONDITION" "GP_Sloc:fibonacci_functions.adb:56:53" "GP_Id:17" "comment:			          result_array(k) = fibo_get_value(k));
                                                    ^ fibonacci_functions.adb:56:53:VC_PRECONDITION" "GP_Shape:L_3_while__pragargs__forall__cmp__call_fibo_get_value" (Fibonacci_functions__fibo_get_value___axiom.fibo_get_value(k)) ))) in (
            ()))
            end ))))
         ;
          (any bool
         requires { true} 
         ensures { ( (result = True) <-> (forall k   "model" "model_trace:2600" "name:k"  : int.
          ( ( (1 <= k) /\ (k <= Fibonacci_functions__fibo_values_vector__L_3__j.j.int__content) ) -> ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get Fibonacci_functions__fibo_values_vector__result_array.result_array.Array__Int__Standard__integer.map__content k)) = (epsilon temp___result_202 : int.
           ( (temp___result_202 = (Fibonacci_functions__fibo_get_value.fibo_get_value k)) /\ (Fibonacci_functions__fibo_get_value.fibo_get_value__function_guard temp___result_202 k) ))) )) )} 
         ) ) in (
          ()))
          end ;
         () (* Loop statements appearing after the loop invariant of loop fibonacci_functions.adb:53 *)
         ;
         () (* Check for the exit condition and loop statements appearing before the loop invariant of loop fibonacci_functions.adb:53 *)
         ;
         (if ((Fibonacci_functions__fibo_values_vector__L_3__j.j.int__content = temp___197)) then (
           raise Fibonacci_functions__fibo_values_vector__L_3.L_3));
          Fibonacci_functions__fibo_values_vector__L_3__j.j.int__content <- ( (Fibonacci_functions__fibo_values_vector__L_3__j.j.int__content + 1) );
         ( "GP_Sloc:fibonacci_functions.adb:54:10" (#"fibonacci_functions.adb" 54 0 0# ()) );
         ( "GP_Sloc:fibonacci_functions.adb:54:29" (#"fibonacci_functions.adb" 54 0 0# ()) );
         ( "GP_Sloc:fibonacci_functions.adb:54:26" (#"fibonacci_functions.adb" 54 0 0# #"fibonacci_functions.adb" 54 0 0# Fibonacci_functions__fibo_values_vector__result_array.result_array.Array__Int__Standard__integer.map__content <- ( (Array__Int__Standard__integer.set(Fibonacci_functions__fibo_values_vector__result_array.result_array.Array__Int__Standard__integer.map__content) (Fibonacci_functions__fibo_values_vector__L_3__j.j.int__content) ((Standard__integer__rep.of_rep((#"fibonacci_functions.adb" 54 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_PRECONDITION" "GP_Sloc:fibonacci_functions.adb:54:29" "GP_Id:15" "comment:         result_array(j) := fibo_get_value(j);
                            ^ fibonacci_functions.adb:54:29:VC_PRECONDITION" "GP_Shape:L_3_while__result_array_assign__call_fibo_get_value" (Fibonacci_functions__fibo_get_value___axiom.fibo_get_value(Fibonacci_functions__fibo_values_vector__L_3__j.j.int__content)) )))))) )) ) )
        done )))
        )))
       )
     with
      Fibonacci_functions__fibo_values_vector__L_3.L_3 -> ()
     end)) )))
   ))
   ) );
   ( "GP_Sloc:fibonacci_functions.adb:58:14" (#"fibonacci_functions.adb" 58 0 0# ()) );
   ( "GP_Sloc:fibonacci_functions.adb:58:7" (#"fibonacci_functions.adb" 58 0 0# ( #"fibonacci_functions.adb" 58 0 0# fibonacci_functions__fibo_values_vector__result.Fibonacci_functions__arrayofints.arrayofints__content <- ( (Fibonacci_functions__arrayofints.of_array(Fibonacci_functions__fibo_values_vector__result_array.result_array.Array__Int__Standard__integer.map__content) ((Standard__integer__rep.to_rep(Fibonacci_functions__fibo_values_vector__result_array.result_array__first))) ((Standard__integer__rep.to_rep(Fibonacci_functions__fibo_values_vector__result_array.result_array__last)))) );
   #"fibonacci_functions.adb" 58 0 0# raise Return__exc )) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   abstract ensures {true}(let _ = ( (let j =  (any int
  ) in (
   (if ((Boolean.andb(((  abstract ensures {true}(let _ = fibonacci_functions__fibo_values_vector__result.Fibonacci_functions__arrayofints.arrayofints__content in (
    ()))
    end ;
   (Fibonacci_functions__arrayofints.first(fibonacci_functions__fibo_values_vector__result.Fibonacci_functions__arrayofints.arrayofints__content)) ) <= j)) ((j <= (  abstract ensures {true}(let _ = fibonacci_functions__fibo_values_vector__result.Fibonacci_functions__arrayofints.arrayofints__content in (
    ()))
    end ;
   (Fibonacci_functions__arrayofints.last(fibonacci_functions__fibo_values_vector__result.Fibonacci_functions__arrayofints.arrayofints__content)) ))))) then (
     abstract ensures {true}(let _ = ((Standard__integer__rep.to_rep((Array__Int__Standard__integer.get((Fibonacci_functions__arrayofints.to_array(fibonacci_functions__fibo_values_vector__result.Fibonacci_functions__arrayofints.arrayofints__content))) ((  assert {  (#"fibonacci_functions.ads" 33 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Sloc:fibonacci_functions.ads:33:39" "GP_Id:19" "comment:	    fibo_values_vector'Result(J) = fibo_get_value(J));
                                      ^ fibonacci_functions.ads:33:39:VC_INDEX_CHECK" "GP_Shape:pragargs__forall__cmp__ixdcomp" ( ((Fibonacci_functions__arrayofints.first fibonacci_functions__fibo_values_vector__result.Fibonacci_functions__arrayofints.arrayofints__content) <= j) /\ (j <= (Fibonacci_functions__arrayofints.last fibonacci_functions__fibo_values_vector__result.Fibonacci_functions__arrayofints.arrayofints__content)) ) )) };
    j ))))) = (#"fibonacci_functions.ads" 33 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_PRECONDITION" "GP_Shape:pragargs__forall__cmp__call_fibo_get_value" "GP_Sloc:fibonacci_functions.ads:33:44" "GP_Id:21" "comment:	    fibo_values_vector'Result(J) = fibo_get_value(J));
                                           ^ fibonacci_functions.ads:33:44:VC_PRECONDITION" (Fibonacci_functions__fibo_get_value___axiom.fibo_get_value((#"fibonacci_functions.ads" 33 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_RANGE_CHECK" "GP_Sloc:fibonacci_functions.ads:33:59" "GP_Id:20" "comment:	    fibo_values_vector'Result(J) = fibo_get_value(J));
                                                          ^ fibonacci_functions.ads:33:59:VC_RANGE_CHECK" "GP_Shape:pragargs__forall__cmp__call_fibo_get_value" (Standard__positive.range_check_(j)) )))) ))) in (
     ()))
     end ))))
  ;
   (any bool
  requires { true} 
  ensures { ( (result = True) <-> (forall j   "model" "name:J" "model_trace:2918"  : int.
   ( ( ((Fibonacci_functions__arrayofints.first fibonacci_functions__fibo_values_vector__result.Fibonacci_functions__arrayofints.arrayofints__content) <= j) /\ (j <= (Fibonacci_functions__arrayofints.last fibonacci_functions__fibo_values_vector__result.Fibonacci_functions__arrayofints.arrayofints__content)) ) -> ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (Fibonacci_functions__arrayofints.to_array fibonacci_functions__fibo_values_vector__result.Fibonacci_functions__arrayofints.arrayofints__content) j)) = (epsilon temp___result_205 : int.
    ( (temp___result_205 = (Fibonacci_functions__fibo_get_value.fibo_get_value j)) /\ (Fibonacci_functions__fibo_get_value.fibo_get_value__function_guard temp___result_205 j) ))) )) )} 
  ) ) in (
   ()))
   end ;
  fibonacci_functions__fibo_values_vector__result.Fibonacci_functions__arrayofints.arrayofints__content )
end

(* Module for checking contracts and absence of run-time errors in subprogram "fibo_is_fibo_value" defined at fibonacci_functions.ads:35, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Fibonacci_functions__fibo_is_fibo_value__subprogram_def
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        Standard__integer
 use        Standard__natural___axiom
 use        Standard__positive___axiom
 use        Fibonacci_functions__fibo_get_value
 use        Fibonacci_functions__fibo_get_value___axiom
 use        Fibonacci_functions__fibo_is_fibo_value__value
 use        Fibonacci_functions__fibo_is_fibo_value__index
 use        Fibonacci_functions__fibo_is_fibo_value__aux
 use        Fibonacci_functions__fibo_is_fibo_value__L_4
 use        Standard__natural___axiom
 use        Standard__positive___axiom
 use        Standard__integer___axiom
 use        Fibonacci_functions__fibo_is_fibo_value__index___axiom
 use        Fibonacci_functions__fibo_is_fibo_value__aux___axiom
 use        Fibonacci_functions__fibo_is_fibo_value__L_4___axiom
 use        Fibonacci_functions__fibo_get_value___axiom
 use        Fibonacci_functions__fibo_is_fibo_value__value___axiom

 val fibonacci_functions__fibo_is_fibo_value__result "model_projected" "model_trace:2939@result" "name:fibo_is_fibo_value"  : bool__ref 
 
 let def #"fibonacci_functions.ads" 35 0 0#"W:diverges:N" "GP_Subp:fibonacci_functions.ads:35" 
   (__void_param : unit)
  requires { #"fibonacci_functions.ads" 35 0 0# true }
  ensures { #"fibonacci_functions.ads" 35 0 0# (#"fibonacci_functions.ads" 42 0 0# ( "model_vc_post" "keep_on_simp" "GP_Reason:VC_POSTCONDITION" "GP_Sloc:fibonacci_functions.ads:42:10" "GP_Id:31" "comment:	 (if fibo_is_fibo_value'Result = True then
         ^ fibonacci_functions.ads:42:10:VC_POSTCONDITION" "GP_Shape:pragargs__if" (if (( (fibonacci_functions__fibo_is_fibo_value__result.bool__content = True) <-> true )) then (
   (exists j  : int.
    ( ( (1 <= j) /\ (j <= 46) ) /\ ( "GP_Sloc:fibonacci_functions.ads:44:14" "GP_Pretty_Ada:2993" ((epsilon temp___result_214 : int.
     ( (temp___result_214 = (Fibonacci_functions__fibo_get_value.fibo_get_value j)) /\ (Fibonacci_functions__fibo_get_value.fibo_get_value__function_guard temp___result_214 j) )) = Fibonacci_functions__fibo_is_fibo_value__value.value) ) ))) else (
   ( "GP_Pretty_Ada:3367" "GP_Sloc:fibonacci_functions.ads:42:11" true ))) )) }
   =
  ( () (* Assume dynamic invariants of inputs of the subprogram fibonacci_functions.ads:35 *)
  ;
   assume {  (Standard__natural___axiom.dynamic_invariant Fibonacci_functions__fibo_is_fibo_value__value.value True False True True) };
   assume {  true };
  () (* Declarations introduced by the compiler at the beginning of the subprogram fibonacci_functions.ads:35 *)
  ;
  () (* Check for RTE in the Pre of the subprogram fibonacci_functions.ads:35 *)
  ;
   abstract ensures {true}(let _ = ( (Fibonacci_functions__fibo_is_fibo_value__value.value <= 1836311903) && (Fibonacci_functions__fibo_is_fibo_value__value.value > 0) ) in (
   ()))
   end ;
  () (* Assume Pre of the subprogram fibonacci_functions.ads:35 *)
  ;
   assume {  ( (Fibonacci_functions__fibo_is_fibo_value__value.value <= 1836311903) /\ (Fibonacci_functions__fibo_is_fibo_value__value.value > 0) ) };
   try
   ( (#"fibonacci_functions.adb" 62 0 0# ( #"fibonacci_functions.adb" 62 0 0# Fibonacci_functions__fibo_is_fibo_value__index.index.int__content <- ( 1 );
   #"fibonacci_functions.adb" 62 0 0# assume { #"fibonacci_functions.adb" 62 0 0# (Standard__positive___axiom.dynamic_invariant Fibonacci_functions__fibo_is_fibo_value__index.index.int__content True False True True) } ));
   (#"fibonacci_functions.adb" 63 0 0# ( #"fibonacci_functions.adb" 63 0 0# abstract ensures {true}(let _ = () in (
    ()))
    end ;
   #"fibonacci_functions.adb" 63 0 0# assume { #"fibonacci_functions.adb" 63 0 0# (Standard__natural___axiom.default_initial_assumption Fibonacci_functions__fibo_is_fibo_value__aux.aux.int__content False) };
   #"fibonacci_functions.adb" 63 0 0# assume { #"fibonacci_functions.adb" 63 0 0# (Standard__natural___axiom.dynamic_invariant Fibonacci_functions__fibo_is_fibo_value__aux.aux.int__content False False True True) } ));
   (#"fibonacci_functions.adb" 65 0 0# ());
   ( "GP_Sloc:fibonacci_functions.adb:65:65" (#"fibonacci_functions.adb" 65 0 0# ( () (* Translation of an Ada loop from fibonacci_functions.adb:65 *)
   ;
   (if (( (Fibonacci_functions__fibo_is_fibo_value__index.index.int__content <= 45) && ((#"fibonacci_functions.adb" 65 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_PRECONDITION" "GP_Sloc:fibonacci_functions.adb:65:34" "GP_Id:29" "comment:      while index <= 45 and then fibo_get_value(index) <= value loop
                                 ^ fibonacci_functions.adb:65:34:VC_PRECONDITION" "GP_Shape:L_4_while__andthen__cmp__call_fibo_get_value" (Fibonacci_functions__fibo_get_value___axiom.fibo_get_value(Fibonacci_functions__fibo_is_fibo_value__index.index.int__content)) )) <= Fibonacci_functions__fibo_is_fibo_value__value.value) )) then (
     try
     (  abstract ensures {true}(let _ = Fibonacci_functions__fibo_is_fibo_value__index.index.int__content in (
      ()))
      end ;
     (let temp___208 =  (any int
     ensures { (result = Fibonacci_functions__fibo_is_fibo_value__index.index.int__content)} 
     ) in (
      (  abstract ensures {true}(let _ = Fibonacci_functions__fibo_is_fibo_value__aux.aux.int__content in (
       ()))
       end ;
      (let temp___207 =  (any int
      ensures { (result = Fibonacci_functions__fibo_is_fibo_value__aux.aux.int__content)} 
      ) in (
        let temp___211 = { int__content = 0 } in 
        ( () (* First unroling of the loop statements appearing before the loop invariant of loop fibonacci_functions.adb:65 *)
        ;
        ( "GP_Sloc:fibonacci_functions.adb:66:10" (#"fibonacci_functions.adb" 66 0 0# ()) );
        ( "GP_Sloc:fibonacci_functions.adb:66:19" (#"fibonacci_functions.adb" 66 0 0# ()) );
        ( "GP_Sloc:fibonacci_functions.adb:66:16" (#"fibonacci_functions.adb" 66 0 0# #"fibonacci_functions.adb" 66 0 0# Fibonacci_functions__fibo_is_fibo_value__index.index.int__content <- ( (#"fibonacci_functions.adb" 66 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Sloc:fibonacci_functions.adb:66:25" "GP_Id:23" "comment:         index := index + 1;
                        ^ fibonacci_functions.adb:66:25:VC_OVERFLOW_CHECK" "GP_Shape:L_4_while__index_assign__add" (Standard__integer.range_check_((Fibonacci_functions__fibo_is_fibo_value__index.index.int__content + 1))) )) )) );
        ( "GP_Sloc:fibonacci_functions.adb:67:10" (#"fibonacci_functions.adb" 67 0 0# ()) );
        ( "GP_Sloc:fibonacci_functions.adb:67:32" (#"fibonacci_functions.adb" 67 0 0# ()) );
        ( "GP_Sloc:fibonacci_functions.adb:67:17" (#"fibonacci_functions.adb" 67 0 0# ()) );
        ( "GP_Sloc:fibonacci_functions.adb:67:14" (#"fibonacci_functions.adb" 67 0 0# #"fibonacci_functions.adb" 67 0 0# Fibonacci_functions__fibo_is_fibo_value__aux.aux.int__content <- ( (#"fibonacci_functions.adb" 67 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_PRECONDITION" "GP_Sloc:fibonacci_functions.adb:67:17" "GP_Id:24" "comment:         aux := fibo_get_value(index);
                ^ fibonacci_functions.adb:67:17:VC_PRECONDITION" "GP_Shape:L_4_while__aux_assign__call_fibo_get_value" (Fibonacci_functions__fibo_get_value___axiom.fibo_get_value(Fibonacci_functions__fibo_is_fibo_value__index.index.int__content)) )) )) );
        ( "GP_Sloc:fibonacci_functions.adb:68:13" (#"fibonacci_functions.adb" 68 0 0# ()) );
        ( "GP_Sloc:fibonacci_functions.adb:68:10" (#"fibonacci_functions.adb" 68 0 0# (if ((Fibonacci_functions__fibo_is_fibo_value__aux.aux.int__content = Fibonacci_functions__fibo_is_fibo_value__value.value)) then (
         ( "GP_Sloc:fibonacci_functions.adb:69:13" (#"fibonacci_functions.adb" 69 0 0# ( #"fibonacci_functions.adb" 69 0 0# fibonacci_functions__fibo_is_fibo_value__result.bool__content <- ( (Boolean.of_int(1)) );
         #"fibonacci_functions.adb" 69 0 0# raise Return__exc )) )) else (
         ()))) );
        () (* While loop translating the Ada loop from fibonacci_functions.adb:65 *)
        ;
         while True do
         invariant { 
          (#"fibonacci_functions.adb" 72 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_LOOP_INVARIANT" "GP_Sloc:fibonacci_functions.adb:72:33" "GP_Id:26" "comment:         pragma Loop_Invariant (for all K in 2..index =>
                                ^ fibonacci_functions.adb:72:33:VC_LOOP_INVARIANT" "GP_Shape:L_4_while__pragargs__forall" (forall k #"fibonacci_functions.adb" 72 0 0#  "model" "model_trace:2706" "name:K"  : int.
           ( ( (2 <= k) /\ (k <= Fibonacci_functions__fibo_is_fibo_value__index.index.int__content) ) -> ( "GP_Pretty_Ada:2719" "GP_Sloc:fibonacci_functions.adb:73:32" (Fibonacci_functions__fibo_is_fibo_value__value.value <> (epsilon temp___result_210 : int.
            ( (temp___result_210 = (Fibonacci_functions__fibo_get_value.fibo_get_value k)) /\ (Fibonacci_functions__fibo_get_value.fibo_get_value__function_guard temp___result_210 k) ))) ) )) ))
          }
         invariant { 
          (#"fibonacci_functions.adb" 74 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_LOOP_INVARIANT" "GP_Sloc:fibonacci_functions.adb:74:33" "GP_Id:27" "comment:         pragma Loop_Invariant (index < 47);
                                ^ fibonacci_functions.adb:74:33:VC_LOOP_INVARIANT" "GP_Shape:L_4_while__pragargs__cmp" ( "GP_Pretty_Ada:2728" "GP_Sloc:fibonacci_functions.adb:74:33" (Fibonacci_functions__fibo_is_fibo_value__index.index.int__content < 47) ) ))
          }
         ( () (* Assume implicit invariants from the loop fibonacci_functions.adb:65 *)
         ;
          assume {  ( ( ( ( true /\ (Standard__natural___axiom.dynamic_invariant Fibonacci_functions__fibo_is_fibo_value__aux.aux.int__content False True True True) ) /\ true ) /\ (Standard__positive___axiom.dynamic_invariant Fibonacci_functions__fibo_is_fibo_value__index.index.int__content False True True True) ) /\ true ) };
         () (* Check for absence of RTE in the invariant of loop fibonacci_functions.adb:65 *)
         ;
          abstract ensures {true}(let _ = ( (let k =  (any int
         ) in (
          (if ((Boolean.andb((2 <= k)) ((k <= Fibonacci_functions__fibo_is_fibo_value__index.index.int__content)))) then (
            abstract ensures {true}(let _ = (Fibonacci_functions__fibo_is_fibo_value__value.value <> (#"fibonacci_functions.adb" 73 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_PRECONDITION" "GP_Sloc:fibonacci_functions.adb:73:41" "GP_Id:25" "comment:                               value /= fibo_get_value(K));
                                        ^ fibonacci_functions.adb:73:41:VC_PRECONDITION" "GP_Shape:L_4_while__pragargs__forall__cmp__call_fibo_get_value" (Fibonacci_functions__fibo_get_value___axiom.fibo_get_value(k)) ))) in (
            ()))
            end ))))
         ;
          (any bool
         requires { true} 
         ensures { ( (result = True) <-> (forall k   "model" "model_trace:2706" "name:K"  : int.
          ( ( (2 <= k) /\ (k <= Fibonacci_functions__fibo_is_fibo_value__index.index.int__content) ) -> (Fibonacci_functions__fibo_is_fibo_value__value.value <> (epsilon temp___result_209 : int.
           ( (temp___result_209 = (Fibonacci_functions__fibo_get_value.fibo_get_value k)) /\ (Fibonacci_functions__fibo_get_value.fibo_get_value__function_guard temp___result_209 k) ))) )) )} 
         ) ) in (
          ()))
          end ;
          abstract ensures {true}(let _ = (Fibonacci_functions__fibo_is_fibo_value__index.index.int__content < 47) in (
          ()))
          end ;
          temp___211.int__content <- ( Fibonacci_functions__fibo_is_fibo_value__index.index.int__content );
         () (* Loop statements appearing after the loop invariant of loop fibonacci_functions.adb:65 *)
         ;
         () (* Check for the exit condition and loop statements appearing before the loop invariant of loop fibonacci_functions.adb:65 *)
         ;
         (if (not ( ( (Fibonacci_functions__fibo_is_fibo_value__index.index.int__content <= 45) && ((#"fibonacci_functions.adb" 65 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_PRECONDITION" "GP_Sloc:fibonacci_functions.adb:65:34" "GP_Id:29" "comment:      while index <= 45 and then fibo_get_value(index) <= value loop
                                 ^ fibonacci_functions.adb:65:34:VC_PRECONDITION" "GP_Shape:L_4_while__andthen__cmp__call_fibo_get_value" (Fibonacci_functions__fibo_get_value___axiom.fibo_get_value(Fibonacci_functions__fibo_is_fibo_value__index.index.int__content)) )) <= Fibonacci_functions__fibo_is_fibo_value__value.value) ) )) then (
           raise Fibonacci_functions__fibo_is_fibo_value__L_4.L_4));
         ( "GP_Sloc:fibonacci_functions.adb:66:10" (#"fibonacci_functions.adb" 66 0 0# ()) );
         ( "GP_Sloc:fibonacci_functions.adb:66:19" (#"fibonacci_functions.adb" 66 0 0# ()) );
         ( "GP_Sloc:fibonacci_functions.adb:66:16" (#"fibonacci_functions.adb" 66 0 0# #"fibonacci_functions.adb" 66 0 0# Fibonacci_functions__fibo_is_fibo_value__index.index.int__content <- ( (#"fibonacci_functions.adb" 66 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Sloc:fibonacci_functions.adb:66:25" "GP_Id:23" "comment:         index := index + 1;
                        ^ fibonacci_functions.adb:66:25:VC_OVERFLOW_CHECK" "GP_Shape:L_4_while__index_assign__add" (Standard__integer.range_check_((Fibonacci_functions__fibo_is_fibo_value__index.index.int__content + 1))) )) )) );
         ( "GP_Sloc:fibonacci_functions.adb:67:10" (#"fibonacci_functions.adb" 67 0 0# ()) );
         ( "GP_Sloc:fibonacci_functions.adb:67:32" (#"fibonacci_functions.adb" 67 0 0# ()) );
         ( "GP_Sloc:fibonacci_functions.adb:67:17" (#"fibonacci_functions.adb" 67 0 0# ()) );
         ( "GP_Sloc:fibonacci_functions.adb:67:14" (#"fibonacci_functions.adb" 67 0 0# #"fibonacci_functions.adb" 67 0 0# Fibonacci_functions__fibo_is_fibo_value__aux.aux.int__content <- ( (#"fibonacci_functions.adb" 67 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_PRECONDITION" "GP_Sloc:fibonacci_functions.adb:67:17" "GP_Id:24" "comment:         aux := fibo_get_value(index);
                ^ fibonacci_functions.adb:67:17:VC_PRECONDITION" "GP_Shape:L_4_while__aux_assign__call_fibo_get_value" (Fibonacci_functions__fibo_get_value___axiom.fibo_get_value(Fibonacci_functions__fibo_is_fibo_value__index.index.int__content)) )) )) );
         ( "GP_Sloc:fibonacci_functions.adb:68:13" (#"fibonacci_functions.adb" 68 0 0# ()) );
         ( "GP_Sloc:fibonacci_functions.adb:68:10" (#"fibonacci_functions.adb" 68 0 0# (if ((Fibonacci_functions__fibo_is_fibo_value__aux.aux.int__content = Fibonacci_functions__fibo_is_fibo_value__value.value)) then (
          ( "GP_Sloc:fibonacci_functions.adb:69:13" (#"fibonacci_functions.adb" 69 0 0# ( #"fibonacci_functions.adb" 69 0 0# fibonacci_functions__fibo_is_fibo_value__result.bool__content <- ( (Boolean.of_int(1)) );
          #"fibonacci_functions.adb" 69 0 0# raise Return__exc )) )) else (
          ()))) );
          abstract ensures {true}(let _ =  abstract ensures {true}(let _ = Fibonacci_functions__fibo_is_fibo_value__index.index.int__content in (
          ()))
          end  in (
          ()))
          end ;
          check {  (#"fibonacci_functions.adb" 71 0 0# ( "model_vc" "keep_on_simp" "GP_Sloc:fibonacci_functions.adb:71:10" "GP_Reason:VC_LOOP_VARIANT" "GP_Id:28" "comment:         pragma Loop_Variant (Increases => index);
         ^ fibonacci_functions.adb:71:10:VC_LOOP_VARIANT" "GP_Shape:L_4_while" (Fibonacci_functions__fibo_is_fibo_value__index.index.int__content > temp___211.int__content) )) } )
        done )))
       )))
      )
    with
     Fibonacci_functions__fibo_is_fibo_value__L_4.L_4 -> ()
    end)) )) );
   ( "GP_Sloc:fibonacci_functions.adb:77:7" (#"fibonacci_functions.adb" 77 0 0# ( #"fibonacci_functions.adb" 77 0 0# fibonacci_functions__fibo_is_fibo_value__result.bool__content <- ( (Boolean.of_int(0)) );
   #"fibonacci_functions.adb" 77 0 0# raise Return__exc )) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   abstract ensures {true}(let _ = (if (((Boolean.to_int(fibonacci_functions__fibo_is_fibo_value__result.bool__content)) = (Boolean.to_int((Boolean.of_int(1)))))) then (
   ( (let j =  (any int
   ) in (
    (if ((Boolean.andb((1 <= j)) ((j <= 46)))) then (
      abstract ensures {true}(let _ = ((#"fibonacci_functions.ads" 44 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_PRECONDITION" "GP_Sloc:fibonacci_functions.ads:44:14" "GP_Id:30" "comment:             fibo_get_value(J) = value));
             ^ fibonacci_functions.ads:44:14:VC_PRECONDITION" "GP_Shape:pragargs__if__forsome__cmp__call_fibo_get_value" (Fibonacci_functions__fibo_get_value___axiom.fibo_get_value(j)) )) = Fibonacci_functions__fibo_is_fibo_value__value.value) in (
      ()))
      end ))))
   ;
    (any bool
   requires { true} 
   ensures { ( (result = True) <-> (exists j  : int.
    ( ( (1 <= j) /\ (j <= 46) ) /\ ((epsilon temp___result_213 : int.
     ( (temp___result_213 = (Fibonacci_functions__fibo_get_value.fibo_get_value j)) /\ (Fibonacci_functions__fibo_get_value.fibo_get_value__function_guard temp___result_213 j) )) = Fibonacci_functions__fibo_is_fibo_value__value.value) )) )} 
   ) )) else (
   (Boolean.of_int(1)))) in (
   ()))
   end ;
  fibonacci_functions__fibo_is_fibo_value__result.bool__content )
end
